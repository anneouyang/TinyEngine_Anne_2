/* ----------------------------------------------------------------------
 * Project: TinyEngine
 * Target ISA:  ARMv7E-M
 * Reference papers:
 * 	- MCUNet: Tiny Deep Learning on IoT Device, NIPS 2020
 *	- MCUNetV2: Memory-Efficient Patch-based Inference for Tiny Deep Learning, NIPS 2021
 * Contact author: 
 * - Wei-Chen Wang, wweichen@mit.edu
 * - Wei-Ming Chen, wmchen@mit.edu
 * -------------------------------------------------------------------- */

/* START: MAC Functions for Pointwise Conv */
static inline void mac_4row_8col_fp(float* sum, const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter_0, const float* filter_1, const float* filter_2, const float* filter_3, 
                      const float* filter_4, const float* filter_5, const float* filter_6, const float* filter_7) {
  *sum++ += *input_0 * *filter_0;
  *sum++ += *input_0 * *filter_1;
  *sum++ += *input_0 * *filter_2;
  *sum++ += *input_0 * *filter_3;
  *sum++ += *input_0 * *filter_4;
  *sum++ += *input_0 * *filter_5;
  *sum++ += *input_0 * *filter_6;
  *sum++ += *input_0 * *filter_7; // for input_0
  *sum++ += *input_1 * *filter_0;
  *sum++ += *input_1 * *filter_1;
  *sum++ += *input_1 * *filter_2;
  *sum++ += *input_1 * *filter_3;
  *sum++ += *input_1 * *filter_4;
  *sum++ += *input_1 * *filter_5;
  *sum++ += *input_1 * *filter_6;
  *sum++ += *input_1 * *filter_7; // for input_1
  *sum++ += *input_2 * *filter_0;
  *sum++ += *input_2 * *filter_1;
  *sum++ += *input_2 * *filter_2;
  *sum++ += *input_2 * *filter_3;
  *sum++ += *input_2 * *filter_4;
  *sum++ += *input_2 * *filter_5;
  *sum++ += *input_2 * *filter_6;
  *sum++ += *input_2 * *filter_7; // for input_2
  *sum++ += *input_3 * *filter_0;
  *sum++ += *input_3 * *filter_1;
  *sum++ += *input_3 * *filter_2;
  *sum++ += *input_3 * *filter_3;
  *sum++ += *input_3 * *filter_4;
  *sum++ += *input_3 * *filter_5;
  *sum++ += *input_3 * *filter_6;
  *sum += *input_3 * *filter_7; // for input_3
}

static inline void mac_2row_8col_fp(float* sum, const float* input_0, const float* input_1, 
                      const float* filter_0, const float* filter_1, const float* filter_2, const float* filter_3, 
                      const float* filter_4, const float* filter_5, const float* filter_6, const float* filter_7) {
  *sum++ += *input_0 * *filter_0;
  *sum++ += *input_0 * *filter_1;
  *sum++ += *input_0 * *filter_2;
  *sum++ += *input_0 * *filter_3;
  *sum++ += *input_0 * *filter_4;
  *sum++ += *input_0 * *filter_5;
  *sum++ += *input_0 * *filter_6;
  *sum++ += *input_0 * *filter_7; // for input_0
  *sum++ += *input_1 * *filter_0;
  *sum++ += *input_1 * *filter_1;
  *sum++ += *input_1 * *filter_2;
  *sum++ += *input_1 * *filter_3;
  *sum++ += *input_1 * *filter_4;
  *sum++ += *input_1 * *filter_5;
  *sum++ += *input_1 * *filter_6;
  *sum += *input_1 * *filter_7; // for input_1
}

static inline void mac_1row_16col_fp_IOHW_forint8w(float* sum, const float* input_0,
                      const float filter_0, const float filter_1, const float filter_2, const float filter_3,
                      const float filter_4, const float filter_5, const float filter_6, const float filter_7,
                      const float filter_8, const float filter_9, const float filter_10, const float filter_11,
                      const float filter_12, const float filter_13, const float filter_14, const float filter_15) {
  *sum += *input_0++ * filter_0;
  *sum += *input_0++ * filter_1;
  *sum += *input_0++ * filter_2;
  *sum += *input_0++ * filter_3;
  *sum += *input_0++ * filter_4;
  *sum += *input_0++ * filter_5;
  *sum += *input_0++ * filter_6;
  *sum += *input_0++ * filter_7;
  *sum += *input_0++ * filter_8;
  *sum += *input_0++ * filter_9;
  *sum += *input_0++ * filter_10;
  *sum += *input_0++ * filter_11;
  *sum += *input_0++ * filter_12;
  *sum += *input_0++ * filter_13;
  *sum += *input_0++ * filter_14;
  *sum += *input_0++ * filter_15;
}

static inline void mac_1row_8col_fp_IOHW_forint8w(float* sum, const float* input_0,
                      const float filter_0, const float filter_1, const float filter_2, const float filter_3,
                      const float filter_4, const float filter_5, const float filter_6, const float filter_7) {
  *sum += *input_0++ * filter_0;
  *sum += *input_0++ * filter_1;
  *sum += *input_0++ * filter_2;
  *sum += *input_0++ * filter_3;
  *sum += *input_0++ * filter_4;
  *sum += *input_0++ * filter_5;
  *sum += *input_0++ * filter_6;
  *sum += *input_0++ * filter_7;
}

static inline void mac_1row_4col_fp_IOHW_forint8w(float* sum, const float* input_0,
                      const float filter_0, const float filter_1, const float filter_2, const float filter_3) {
  *sum += *input_0++ * filter_0;
  *sum += *input_0++ * filter_1;
  *sum += *input_0++ * filter_2;
  *sum += *input_0++ * filter_3;
}

static inline void mac_4row_16col_fp_IOHW_forint8w(float* sum, const float* input_0, const float* input_1, const float* input_2, const float* input_3,
                      const float filter_0, const float filter_1, const float filter_2, const float filter_3,
                      const float filter_4, const float filter_5, const float filter_6, const float filter_7,
                      const float filter_8, const float filter_9, const float filter_10, const float filter_11,
                      const float filter_12, const float filter_13, const float filter_14, const float filter_15) {
  *sum += *input_0++ * filter_0;
  *sum += *input_0++ * filter_1;
  *sum += *input_0++ * filter_2;
  *sum += *input_0++ * filter_3;
  *sum += *input_0++ * filter_4;
  *sum += *input_0++ * filter_5;
  *sum += *input_0++ * filter_6;
  *sum += *input_0++ * filter_7;
  *sum += *input_0++ * filter_8;
  *sum += *input_0++ * filter_9;
  *sum += *input_0++ * filter_10;
  *sum += *input_0++ * filter_11;
  *sum += *input_0++ * filter_12;
  *sum += *input_0++ * filter_13;
  *sum += *input_0++ * filter_14;
  *sum++ += *input_0++ * filter_15;

  *sum += *input_1++ * filter_0;
  *sum += *input_1++ * filter_1;
  *sum += *input_1++ * filter_2;
  *sum += *input_1++ * filter_3;
  *sum += *input_1++ * filter_4;
  *sum += *input_1++ * filter_5;
  *sum += *input_1++ * filter_6;
  *sum += *input_1++ * filter_7;
  *sum += *input_1++ * filter_8;
  *sum += *input_1++ * filter_9;
  *sum += *input_1++ * filter_10;
  *sum += *input_1++ * filter_11;
  *sum += *input_1++ * filter_12;
  *sum += *input_1++ * filter_13;
  *sum += *input_1++ * filter_14;
  *sum++ += *input_1++ * filter_15;

  *sum += *input_2++ * filter_0;
  *sum += *input_2++ * filter_1;
  *sum += *input_2++ * filter_2;
  *sum += *input_2++ * filter_3;
  *sum += *input_2++ * filter_4;
  *sum += *input_2++ * filter_5;
  *sum += *input_2++ * filter_6;
  *sum += *input_2++ * filter_7;
  *sum += *input_2++ * filter_8;
  *sum += *input_2++ * filter_9;
  *sum += *input_2++ * filter_10;
  *sum += *input_2++ * filter_11;
  *sum += *input_2++ * filter_12;
  *sum += *input_2++ * filter_13;
  *sum += *input_2++ * filter_14;
  *sum++ += *input_2++ * filter_15;

  *sum += *input_3++ * filter_0;
  *sum += *input_3++ * filter_1;
  *sum += *input_3++ * filter_2;
  *sum += *input_3++ * filter_3;
  *sum += *input_3++ * filter_4;
  *sum += *input_3++ * filter_5;
  *sum += *input_3++ * filter_6;
  *sum += *input_3++ * filter_7;
  *sum += *input_3++ * filter_8;
  *sum += *input_3++ * filter_9;
  *sum += *input_3++ * filter_10;
  *sum += *input_3++ * filter_11;
  *sum += *input_3++ * filter_12;
  *sum += *input_3++ * filter_13;
  *sum += *input_3++ * filter_14;
  *sum++ += *input_3++ * filter_15;
}

static inline void mac_4row_8col_fp_IOHW_forint8w(float* sum, const float* input_0, const float* input_1, const float* input_2, const float* input_3,
                      const float filter_0, const float filter_1, const float filter_2, const float filter_3,
                      const float filter_4, const float filter_5, const float filter_6, const float filter_7) {
  *sum += *input_0++ * filter_0;
  *sum += *input_0++ * filter_1;
  *sum += *input_0++ * filter_2;
  *sum += *input_0++ * filter_3;
  *sum += *input_0++ * filter_4;
  *sum += *input_0++ * filter_5;
  *sum += *input_0++ * filter_6;
  *sum++ += *input_0++ * filter_7;

  *sum += *input_1++ * filter_0;
  *sum += *input_1++ * filter_1;
  *sum += *input_1++ * filter_2;
  *sum += *input_1++ * filter_3;
  *sum += *input_1++ * filter_4;
  *sum += *input_1++ * filter_5;
  *sum += *input_1++ * filter_6;
  *sum++ += *input_1++ * filter_7;

  *sum += *input_2++ * filter_0;
  *sum += *input_2++ * filter_1;
  *sum += *input_2++ * filter_2;
  *sum += *input_2++ * filter_3;
  *sum += *input_2++ * filter_4;
  *sum += *input_2++ * filter_5;
  *sum += *input_2++ * filter_6;
  *sum++ += *input_2++ * filter_7;

  *sum += *input_3++ * filter_0;
  *sum += *input_3++ * filter_1;
  *sum += *input_3++ * filter_2;
  *sum += *input_3++ * filter_3;
  *sum += *input_3++ * filter_4;
  *sum += *input_3++ * filter_5;
  *sum += *input_3++ * filter_6;
  *sum++ += *input_3++ * filter_7;
}

static inline void mac_4row_4col_fp_IOHW_forint8w(float* sum, const float* input_0, const float* input_1, const float* input_2, const float* input_3,
                      const float filter_0, const float filter_1, const float filter_2, const float filter_3) {
  *sum += *input_0++ * filter_0;
  *sum += *input_0++ * filter_1;
  *sum += *input_0++ * filter_2;
  *sum++ += *input_0++ * filter_3;

  *sum += *input_1++ * filter_0;
  *sum += *input_1++ * filter_1;
  *sum += *input_1++ * filter_2;
  *sum++ += *input_1++ * filter_3;

  *sum += *input_2++ * filter_0;
  *sum += *input_2++ * filter_1;
  *sum += *input_2++ * filter_2;
  *sum++ += *input_2++ * filter_3;

  *sum += *input_3++ * filter_0;
  *sum += *input_3++ * filter_1;
  *sum += *input_3++ * filter_2;
  *sum++ += *input_3++ * filter_3;
}

static inline void mac_4row_4col_fp_forint8w(float* sum, const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float filter_0, const float filter_1, const float filter_2, const float filter_3) {
  *sum++ += *input_0 * filter_0;
  *sum++ += *input_0 * filter_1;
  *sum++ += *input_0 * filter_2;
  *sum++ += *input_0 * filter_3;
  *sum++ += *input_1 * filter_0;
  *sum++ += *input_1 * filter_1;
  *sum++ += *input_1 * filter_2;
  *sum++ += *input_1 * filter_3;
  *sum++ += *input_2 * filter_0;
  *sum++ += *input_2 * filter_1;
  *sum++ += *input_2 * filter_2;
  *sum++ += *input_2 * filter_3;
  *sum++ += *input_3 * filter_0;
  *sum++ += *input_3 * filter_1;
  *sum++ += *input_3 * filter_2;
  *sum += *input_3 * filter_3;
}

static inline void mac_4row_4col_fp(float* sum, const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter_0, const float* filter_1, const float* filter_2, const float* filter_3) {
  *sum++ += *input_0 * *filter_0;
  *sum++ += *input_0 * *filter_1;
  *sum++ += *input_0 * *filter_2;
  *sum++ += *input_0 * *filter_3;
  *sum++ += *input_1 * *filter_0;
  *sum++ += *input_1 * *filter_1;
  *sum++ += *input_1 * *filter_2;
  *sum++ += *input_1 * *filter_3;
  *sum++ += *input_2 * *filter_0;
  *sum++ += *input_2 * *filter_1;
  *sum++ += *input_2 * *filter_2;
  *sum++ += *input_2 * *filter_3;
  *sum++ += *input_3 * *filter_0;
  *sum++ += *input_3 * *filter_1;
  *sum++ += *input_3 * *filter_2;
  *sum += *input_3 * *filter_3;
}

static inline void mac_4row_2col_fp(float* sum, const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter_0, const float* filter_1) {
  *sum++ += *input_0 * *filter_0;
  *sum++ += *input_0 * *filter_1;
  *sum++ += *input_1 * *filter_0;
  *sum++ += *input_1 * *filter_1;
  *sum++ += *input_2 * *filter_0;
  *sum++ += *input_2 * *filter_1;
  *sum++ += *input_3 * *filter_0;
  *sum++ += *input_3 * *filter_1;
}

static inline void mac_4row_1col_fp(float* sum, const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter_0) {
  *sum++ += *input_0 * *filter_0;
  *sum++ += *input_1 * *filter_0;
  *sum++ += *input_2 * *filter_0;
  *sum++ += *input_3 * *filter_0;
}

static inline void mac_1row_16col_fp(float* sum, const float* input_0, 
                      const float* filter_0, const float* filter_1, const float* filter_2, const float* filter_3, 
                      const float* filter_4, const float* filter_5, const float* filter_6, const float* filter_7,
                      const float* filter_8, const float* filter_9, const float* filter_10, const float* filter_11, 
                      const float* filter_12, const float* filter_13, const float* filter_14, const float* filter_15) {
  *sum++ += *input_0 * *filter_0;
  *sum++ += *input_0 * *filter_1;
  *sum++ += *input_0 * *filter_2;
  *sum++ += *input_0 * *filter_3;
  *sum++ += *input_0 * *filter_4;
  *sum++ += *input_0 * *filter_5;
  *sum++ += *input_0 * *filter_6;
  *sum++ += *input_0 * *filter_7;
  *sum++ += *input_0 * *filter_8;
  *sum++ += *input_0 * *filter_9;
  *sum++ += *input_0 * *filter_10;
  *sum++ += *input_0 * *filter_11;
  *sum++ += *input_0 * *filter_12;
  *sum++ += *input_0 * *filter_13;
  *sum++ += *input_0 * *filter_14;
  *sum += *input_0 * *filter_15;
}

static inline void mac_1row_10col_fp_IOHW_forint8w(float* sum, const float* input_0, 
                      const float filter_0, const float filter_1, const float filter_2, const float filter_3, const float filter_4, 
                      const float filter_5, const float filter_6, const float filter_7, const float filter_8, const float filter_9) {
  *sum += *input_0++ * filter_0;
  *sum += *input_0++ * filter_1;
  *sum += *input_0++ * filter_2;
  *sum += *input_0++ * filter_3;
  *sum += *input_0++ * filter_4;
  *sum += *input_0++ * filter_5;
  *sum += *input_0++ * filter_6;
  *sum += *input_0++ * filter_7;
  *sum += *input_0++ * filter_8;
  *sum += *input_0++ * filter_9;
}

static inline void mac_1row_8col_fp_forint8w(float* sum, const float* input_0, 
                      const float filter_0, const float filter_1, const float filter_2, const float filter_3,
                      const float filter_4, const float filter_5, const float filter_6, const float filter_7) {
  *sum++ += *input_0 * filter_0;
  *sum++ += *input_0 * filter_1;
  *sum++ += *input_0 * filter_2;
  *sum++ += *input_0 * filter_3;
  *sum++ += *input_0 * filter_4;
  *sum++ += *input_0 * filter_5;
  *sum++ += *input_0 * filter_6;
  *sum += *input_0 * filter_7;
}

static inline void mac_1row_8col_fp(float* sum, const float* input_0, 
                      const float* filter_0, const float* filter_1, const float* filter_2, const float* filter_3,
                      const float* filter_4, const float* filter_5, const float* filter_6, const float* filter_7) {
  *sum++ += *input_0 * *filter_0;
  *sum++ += *input_0 * *filter_1;
  *sum++ += *input_0 * *filter_2;
  *sum++ += *input_0 * *filter_3;
  *sum++ += *input_0 * *filter_4;
  *sum++ += *input_0 * *filter_5;
  *sum++ += *input_0 * *filter_6;
  *sum += *input_0 * *filter_7;
}

static inline void mac_1row_4col_fp_forint8w(float* sum, const float* input_0, 
                      const float filter_0, const float filter_1, const float filter_2, const float filter_3) {
  *sum++ += *input_0 * filter_0;
  *sum++ += *input_0 * filter_1;
  *sum++ += *input_0 * filter_2;
  *sum += *input_0 * filter_3;
}

static inline void mac_1row_4col_fp(float* sum, const float* input_0, 
                      const float* filter_0, const float* filter_1, const float* filter_2, const float* filter_3) {
  *sum++ += *input_0 * *filter_0;
  *sum++ += *input_0 * *filter_1;
  *sum++ += *input_0 * *filter_2;
  *sum += *input_0 * *filter_3;
}
/* END: MAC Functions for Pointwise Conv */



/* START: Assign Output Functions */

/* START: For Group Conv */
static inline void assign_sum_to_group_output_4row8col(int8_t* out_0, int8_t* out_1, int8_t* out_2, int8_t* out_3, int8_t* out_4, int8_t* out_5, int8_t* out_6, int8_t* out_7,
                      const float* sum_0, const float* sum_1, const float* sum_2, const float* sum_3,
                      const float output_activation_min, const float output_activation_max, const float* scales, const float learning_rate, const int i_output_depth) {
  *out_0++ -= MIN(MAX(sum_0[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
  *out_1++ -= MIN(MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
  *out_2++ -= MIN(MAX(sum_0[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
  *out_3++ -= MIN(MAX(sum_0[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
  *out_4++ -= MIN(MAX(sum_0[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
  *out_5++ -= MIN(MAX(sum_0[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
  *out_6++ -= MIN(MAX(sum_0[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
  *out_7++ -= MIN(MAX(sum_0[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;

  *out_0++ -= MIN(MAX(sum_1[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
  *out_1++ -= MIN(MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
  *out_2++ -= MIN(MAX(sum_1[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
  *out_3++ -= MIN(MAX(sum_1[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
  *out_4++ -= MIN(MAX(sum_1[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
  *out_5++ -= MIN(MAX(sum_1[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
  *out_6++ -= MIN(MAX(sum_1[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
  *out_7++ -= MIN(MAX(sum_1[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;

  *out_0++ -= MIN(MAX(sum_2[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
  *out_1++ -= MIN(MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
  *out_2++ -= MIN(MAX(sum_2[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
  *out_3++ -= MIN(MAX(sum_2[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
  *out_4++ -= MIN(MAX(sum_2[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
  *out_5++ -= MIN(MAX(sum_2[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
  *out_6++ -= MIN(MAX(sum_2[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
  *out_7++ -= MIN(MAX(sum_2[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;

  *out_0++ -= MIN(MAX(sum_3[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
  *out_1++ -= MIN(MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
  *out_2++ -= MIN(MAX(sum_3[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
  *out_3++ -= MIN(MAX(sum_3[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
  *out_4++ -= MIN(MAX(sum_3[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
  *out_5++ -= MIN(MAX(sum_3[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
  *out_6++ -= MIN(MAX(sum_3[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
  *out_7++ -= MIN(MAX(sum_3[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
}

static inline void assign_sum_to_group_output_4row16col(int8_t* out_0, int8_t* out_1, int8_t* out_2, int8_t* out_3, int8_t* out_4, int8_t* out_5, int8_t* out_6, int8_t* out_7,
                      int8_t* out_8, int8_t* out_9, int8_t* out_10, int8_t* out_11, int8_t* out_12, int8_t* out_13, int8_t* out_14, int8_t* out_15,
                      const float* sum_0, const float* sum_1, const float* sum_2, const float* sum_3,
                      const float output_activation_min, const float output_activation_max, const float* scales, const float learning_rate, const int i_output_depth) {
  *out_0++ -= MIN(MAX(sum_0[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
  *out_1++ -= MIN(MAX(sum_0[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
  *out_2++ -= MIN(MAX(sum_0[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
  *out_3++ -= MIN(MAX(sum_0[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
  *out_4++ -= MIN(MAX(sum_0[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
  *out_5++ -= MIN(MAX(sum_0[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
  *out_6++ -= MIN(MAX(sum_0[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
  *out_7++ -= MIN(MAX(sum_0[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
  *out_8++ -= MIN(MAX(sum_0[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
  *out_9++ -= MIN(MAX(sum_0[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
  *out_10++ -= MIN(MAX(sum_0[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
  *out_11++ -= MIN(MAX(sum_0[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
  *out_12++ -= MIN(MAX(sum_0[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
  *out_13++ -= MIN(MAX(sum_0[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
  *out_14++ -= MIN(MAX(sum_0[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
  *out_15++ -= MIN(MAX(sum_0[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;

  *out_0++ -= MIN(MAX(sum_1[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
  *out_1++ -= MIN(MAX(sum_1[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
  *out_2++ -= MIN(MAX(sum_1[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
  *out_3++ -= MIN(MAX(sum_1[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
  *out_4++ -= MIN(MAX(sum_1[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
  *out_5++ -= MIN(MAX(sum_1[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
  *out_6++ -= MIN(MAX(sum_1[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
  *out_7++ -= MIN(MAX(sum_1[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
  *out_8++ -= MIN(MAX(sum_1[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
  *out_9++ -= MIN(MAX(sum_1[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
  *out_10++ -= MIN(MAX(sum_1[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
  *out_11++ -= MIN(MAX(sum_1[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
  *out_12++ -= MIN(MAX(sum_1[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
  *out_13++ -= MIN(MAX(sum_1[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
  *out_14++ -= MIN(MAX(sum_1[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
  *out_15++ -= MIN(MAX(sum_1[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;

  *out_0++ -= MIN(MAX(sum_2[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
  *out_1++ -= MIN(MAX(sum_2[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
  *out_2++ -= MIN(MAX(sum_2[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
  *out_3++ -= MIN(MAX(sum_2[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
  *out_4++ -= MIN(MAX(sum_2[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
  *out_5++ -= MIN(MAX(sum_2[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
  *out_6++ -= MIN(MAX(sum_2[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
  *out_7++ -= MIN(MAX(sum_2[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
  *out_8++ -= MIN(MAX(sum_2[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
  *out_9++ -= MIN(MAX(sum_2[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
  *out_10++ -= MIN(MAX(sum_2[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
  *out_11++ -= MIN(MAX(sum_2[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
  *out_12++ -= MIN(MAX(sum_2[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
  *out_13++ -= MIN(MAX(sum_2[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
  *out_14++ -= MIN(MAX(sum_2[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
  *out_15++ -= MIN(MAX(sum_2[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;

  *out_0++ -= MIN(MAX(sum_3[0], output_activation_min), output_activation_max) * scales[i_output_depth] * learning_rate;
  *out_1++ -= MIN(MAX(sum_3[1], output_activation_min), output_activation_max) * scales[i_output_depth + 1] * learning_rate;
  *out_2++ -= MIN(MAX(sum_3[2], output_activation_min), output_activation_max) * scales[i_output_depth + 2] * learning_rate;
  *out_3++ -= MIN(MAX(sum_3[3], output_activation_min), output_activation_max) * scales[i_output_depth + 3] * learning_rate;
  *out_4++ -= MIN(MAX(sum_3[4], output_activation_min), output_activation_max) * scales[i_output_depth + 4] * learning_rate;
  *out_5++ -= MIN(MAX(sum_3[5], output_activation_min), output_activation_max) * scales[i_output_depth + 5] * learning_rate;
  *out_6++ -= MIN(MAX(sum_3[6], output_activation_min), output_activation_max) * scales[i_output_depth + 6] * learning_rate;
  *out_7++ -= MIN(MAX(sum_3[7], output_activation_min), output_activation_max) * scales[i_output_depth + 7] * learning_rate;
  *out_8++ -= MIN(MAX(sum_3[8], output_activation_min), output_activation_max) * scales[i_output_depth + 8] * learning_rate;
  *out_9++ -= MIN(MAX(sum_3[9], output_activation_min), output_activation_max) * scales[i_output_depth + 9] * learning_rate;
  *out_10++ -= MIN(MAX(sum_3[10], output_activation_min), output_activation_max) * scales[i_output_depth + 10] * learning_rate;
  *out_11++ -= MIN(MAX(sum_3[11], output_activation_min), output_activation_max) * scales[i_output_depth + 11] * learning_rate;
  *out_12++ -= MIN(MAX(sum_3[12], output_activation_min), output_activation_max) * scales[i_output_depth + 12] * learning_rate;
  *out_13++ -= MIN(MAX(sum_3[13], output_activation_min), output_activation_max) * scales[i_output_depth + 13] * learning_rate;
  *out_14++ -= MIN(MAX(sum_3[14], output_activation_min), output_activation_max) * scales[i_output_depth + 14] * learning_rate;
  *out_15++ -= MIN(MAX(sum_3[15], output_activation_min), output_activation_max) * scales[i_output_depth + 15] * learning_rate;
}
/* END: For Group Conv */


/* START: For Pointwise Conv */
static inline void assign_sum_to_pointwise_output_4row8col_noMINMAX(float* out_0, float* out_1, float* out_2, float* out_3, const float* sum) {
    *out_0++ += sum[0];
    *out_1++ += sum[1];
    *out_2++ += sum[2];
    *out_3++ += sum[3];
    *out_0++ += sum[4];
    *out_1++ += sum[5];
    *out_2++ += sum[6];
    *out_3++ += sum[7];
    *out_0++ += sum[8];
    *out_1++ += sum[9];
    *out_2++ += sum[10];
    *out_3++ += sum[11];
    *out_0++ += sum[12];
    *out_1++ += sum[13];
    *out_2++ += sum[14];
    *out_3++ += sum[15];
    *out_0++ += sum[16];
    *out_1++ += sum[17];
    *out_2++ += sum[18];
    *out_3++ += sum[19];
    *out_0++ += sum[20];
    *out_1++ += sum[21];
    *out_2++ += sum[22];
    *out_3++ += sum[23];
    *out_0++ += sum[24];
    *out_1++ += sum[25];
    *out_2++ += sum[26];
    *out_3++ += sum[27];
    *out_0++ += sum[28];
    *out_1++ += sum[29];
    *out_2++ += sum[30];
    *out_3++ += sum[31];
}

static inline void assign_sum_to_pointwise_output_1row8col_noMINMAX(float* out_0, const float* sum) {
    *out_0++ += sum[0];
    *out_0++ += sum[1];
    *out_0++ += sum[2];
    *out_0++ += sum[3];
    *out_0++ += sum[4];
    *out_0++ += sum[5];
    *out_0++ += sum[6];
    *out_0++ += sum[7];
}


static inline void assign_sum_to_pointwise_output_4row8col(float* out_0, float* out_1, float* out_2, float* out_3, 
                      const float* sum, const float output_activation_min, const float output_activation_max) {
    *out_0++ += MIN(MAX(sum[0], output_activation_min), output_activation_max);
    *out_1++ += MIN(MAX(sum[1], output_activation_min), output_activation_max);
    *out_2++ += MIN(MAX(sum[2], output_activation_min), output_activation_max);
    *out_3++ += MIN(MAX(sum[3], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[4], output_activation_min), output_activation_max);
    *out_1++ += MIN(MAX(sum[5], output_activation_min), output_activation_max);
    *out_2++ += MIN(MAX(sum[6], output_activation_min), output_activation_max);
    *out_3++ += MIN(MAX(sum[7], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[8], output_activation_min), output_activation_max);
    *out_1++ += MIN(MAX(sum[9], output_activation_min), output_activation_max);
    *out_2++ += MIN(MAX(sum[10], output_activation_min), output_activation_max);
    *out_3++ += MIN(MAX(sum[11], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[12], output_activation_min), output_activation_max);
    *out_1++ += MIN(MAX(sum[13], output_activation_min), output_activation_max);
    *out_2++ += MIN(MAX(sum[14], output_activation_min), output_activation_max);
    *out_3++ += MIN(MAX(sum[15], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[16], output_activation_min), output_activation_max);
    *out_1++ += MIN(MAX(sum[17], output_activation_min), output_activation_max);
    *out_2++ += MIN(MAX(sum[18], output_activation_min), output_activation_max);
    *out_3++ += MIN(MAX(sum[19], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[20], output_activation_min), output_activation_max);
    *out_1++ += MIN(MAX(sum[21], output_activation_min), output_activation_max);
    *out_2++ += MIN(MAX(sum[22], output_activation_min), output_activation_max);
    *out_3++ += MIN(MAX(sum[23], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[24], output_activation_min), output_activation_max);
    *out_1++ += MIN(MAX(sum[25], output_activation_min), output_activation_max);
    *out_2++ += MIN(MAX(sum[26], output_activation_min), output_activation_max);
    *out_3++ += MIN(MAX(sum[27], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[28], output_activation_min), output_activation_max);
    *out_1++ += MIN(MAX(sum[29], output_activation_min), output_activation_max);
    *out_2++ += MIN(MAX(sum[30], output_activation_min), output_activation_max);
    *out_3++ += MIN(MAX(sum[31], output_activation_min), output_activation_max);
}

static inline void assign_sum_to_pointwise_output_1row8col(float* out_0, 
                      const float* sum, const float output_activation_min, const float output_activation_max) {
    *out_0++ += MIN(MAX(sum[0], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[1], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[2], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[3], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[4], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[5], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[6], output_activation_min), output_activation_max);
    *out_0++ += MIN(MAX(sum[7], output_activation_min), output_activation_max);
}
/* END: For Pointwise Conv */

/* END: Assign Output Functions */



/* START: MAC Functions for Group Conv */

/* START: For 8x8 kernel size, stride1_pad0_in8x8_out1x1_uniweight */
static inline void group_mac_kernel8_4row_16col_fp_uniweight_IOHW(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
                      const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter, const int output_depth_per_group) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  *sum_2 += input_2[0] * *filter;
  *sum_3 += input_3[0] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  *sum_2 += input_2[1] * *filter;
  *sum_3 += input_3[1] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  *sum_2 += input_2[2] * *filter;
  *sum_3 += input_3[2] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  *sum_2 += input_2[3] * *filter;
  *sum_3 += input_3[3] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  *sum_2 += input_2[4] * *filter;
  *sum_3 += input_3[4] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  *sum_2 += input_2[5] * *filter;
  *sum_3 += input_3[5] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  *sum_2 += input_2[6] * *filter;
  *sum_3 += input_3[6] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  *sum_2 += input_2[7] * *filter;
  *sum_3 += input_3[7] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  *sum_2 += input_2[8] * *filter;
  *sum_3 += input_3[8] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter;
  *sum_2 += input_2[9] * *filter;
  *sum_3 += input_3[9] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter;
  *sum_2 += input_2[10] * *filter;
  *sum_3 += input_3[10] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter;
  *sum_2 += input_2[11] * *filter;
  *sum_3 += input_3[11] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter;
  *sum_2 += input_2[12] * *filter;
  *sum_3 += input_3[12] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter;
  *sum_2 += input_2[13] * *filter;
  *sum_3 += input_3[13] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter;
  *sum_2 += input_2[14] * *filter;
  *sum_3 += input_3[14] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter;
  *sum_2 += input_2[15] * *filter;
  *sum_3 += input_3[15] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[16] * *filter;
  *sum_1 += input_1[16] * *filter;
  *sum_2 += input_2[16] * *filter;
  *sum_3 += input_3[16] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[17] * *filter;
  *sum_1 += input_1[17] * *filter;
  *sum_2 += input_2[17] * *filter;
  *sum_3 += input_3[17] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[18] * *filter;
  *sum_1 += input_1[18] * *filter;
  *sum_2 += input_2[18] * *filter;
  *sum_3 += input_3[18] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[19] * *filter;
  *sum_1 += input_1[19] * *filter;
  *sum_2 += input_2[19] * *filter;
  *sum_3 += input_3[19] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[20] * *filter;
  *sum_1 += input_1[20] * *filter;
  *sum_2 += input_2[20] * *filter;
  *sum_3 += input_3[20] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[21] * *filter;
  *sum_1 += input_1[21] * *filter;
  *sum_2 += input_2[21] * *filter;
  *sum_3 += input_3[21] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[22] * *filter;
  *sum_1 += input_1[22] * *filter;
  *sum_2 += input_2[22] * *filter;
  *sum_3 += input_3[22] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[23] * *filter;
  *sum_1 += input_1[23] * *filter;
  *sum_2 += input_2[23] * *filter;
  *sum_3 += input_3[23] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[24] * *filter;
  *sum_1 += input_1[24] * *filter;
  *sum_2 += input_2[24] * *filter;
  *sum_3 += input_3[24] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[25] * *filter;
  *sum_1 += input_1[25] * *filter;
  *sum_2 += input_2[25] * *filter;
  *sum_3 += input_3[25] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[26] * *filter;
  *sum_1 += input_1[26] * *filter;
  *sum_2 += input_2[26] * *filter;
  *sum_3 += input_3[26] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[27] * *filter;
  *sum_1 += input_1[27] * *filter;
  *sum_2 += input_2[27] * *filter;
  *sum_3 += input_3[27] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[28] * *filter;
  *sum_1 += input_1[28] * *filter;
  *sum_2 += input_2[28] * *filter;
  *sum_3 += input_3[28] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[29] * *filter;
  *sum_1 += input_1[29] * *filter;
  *sum_2 += input_2[29] * *filter;
  *sum_3 += input_3[29] * *filter;
  filter += output_depth_per_group;
  
  *sum_0 += input_0[30] * *filter;
  *sum_1 += input_1[30] * *filter;
  *sum_2 += input_2[30] * *filter;
  *sum_3 += input_3[30] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[31] * *filter;
  *sum_1 += input_1[31] * *filter;
  *sum_2 += input_2[31] * *filter;
  *sum_3 += input_3[31] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[32] * *filter;
  *sum_1 += input_1[32] * *filter;
  *sum_2 += input_2[32] * *filter;
  *sum_3 += input_3[32] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[33] * *filter;
  *sum_1 += input_1[33] * *filter;
  *sum_2 += input_2[33] * *filter;
  *sum_3 += input_3[33] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[34] * *filter;
  *sum_1 += input_1[34] * *filter;
  *sum_2 += input_2[34] * *filter;
  *sum_3 += input_3[34] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[35] * *filter;
  *sum_1 += input_1[35] * *filter;
  *sum_2 += input_2[35] * *filter;
  *sum_3 += input_3[35] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[36] * *filter;
  *sum_1 += input_1[36] * *filter;
  *sum_2 += input_2[36] * *filter;
  *sum_3 += input_3[36] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[37] * *filter;
  *sum_1 += input_1[37] * *filter;
  *sum_2 += input_2[37] * *filter;
  *sum_3 += input_3[37] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[38] * *filter;
  *sum_1 += input_1[38] * *filter;
  *sum_2 += input_2[38] * *filter;
  *sum_3 += input_3[38] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[39] * *filter;
  *sum_1 += input_1[39] * *filter;
  *sum_2 += input_2[39] * *filter;
  *sum_3 += input_3[39] * *filter;
  filter += output_depth_per_group;
  
  *sum_0 += input_0[40] * *filter;
  *sum_1 += input_1[40] * *filter;
  *sum_2 += input_2[40] * *filter;
  *sum_3 += input_3[40] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[41] * *filter;
  *sum_1 += input_1[41] * *filter;
  *sum_2 += input_2[41] * *filter;
  *sum_3 += input_3[41] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[42] * *filter;
  *sum_1 += input_1[42] * *filter;
  *sum_2 += input_2[42] * *filter;
  *sum_3 += input_3[42] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[43] * *filter;
  *sum_1 += input_1[43] * *filter;
  *sum_2 += input_2[43] * *filter;
  *sum_3 += input_3[43] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[44] * *filter;
  *sum_1 += input_1[44] * *filter;
  *sum_2 += input_2[44] * *filter;
  *sum_3 += input_3[44] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[45] * *filter;
  *sum_1 += input_1[45] * *filter;
  *sum_2 += input_2[45] * *filter;
  *sum_3 += input_3[45] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[46] * *filter;
  *sum_1 += input_1[46] * *filter;
  *sum_2 += input_2[46] * *filter;
  *sum_3 += input_3[46] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[47] * *filter;
  *sum_1 += input_1[47] * *filter;
  *sum_2 += input_2[47] * *filter;
  *sum_3 += input_3[47] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[48] * *filter;
  *sum_1 += input_1[48] * *filter;
  *sum_2 += input_2[48] * *filter;
  *sum_3 += input_3[48] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[49] * *filter;
  *sum_1 += input_1[49] * *filter;
  *sum_2 += input_2[49] * *filter;
  *sum_3 += input_3[49] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[50] * *filter;
  *sum_1 += input_1[50] * *filter;
  *sum_2 += input_2[50] * *filter;
  *sum_3 += input_3[50] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[51] * *filter;
  *sum_1 += input_1[51] * *filter;
  *sum_2 += input_2[51] * *filter;
  *sum_3 += input_3[51] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[52] * *filter;
  *sum_1 += input_1[52] * *filter;
  *sum_2 += input_2[52] * *filter;
  *sum_3 += input_3[52] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[53] * *filter;
  *sum_1 += input_1[53] * *filter;
  *sum_2 += input_2[53] * *filter;
  *sum_3 += input_3[53] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[54] * *filter;
  *sum_1 += input_1[54] * *filter;
  *sum_2 += input_2[54] * *filter;
  *sum_3 += input_3[54] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[55] * *filter;
  *sum_1 += input_1[55] * *filter;
  *sum_2 += input_2[55] * *filter;
  *sum_3 += input_3[55] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[56] * *filter;
  *sum_1 += input_1[56] * *filter;
  *sum_2 += input_2[56] * *filter;
  *sum_3 += input_3[56] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[57] * *filter;
  *sum_1 += input_1[57] * *filter;
  *sum_2 += input_2[57] * *filter;
  *sum_3 += input_3[57] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[58] * *filter;
  *sum_1 += input_1[58] * *filter;
  *sum_2 += input_2[58] * *filter;
  *sum_3 += input_3[58] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[59] * *filter;
  *sum_1 += input_1[59] * *filter;
  *sum_2 += input_2[59] * *filter;
  *sum_3 += input_3[59] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[60] * *filter;
  *sum_1 += input_1[60] * *filter;
  *sum_2 += input_2[60] * *filter;
  *sum_3 += input_3[60] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[61] * *filter;
  *sum_1 += input_1[61] * *filter;
  *sum_2 += input_2[61] * *filter;
  *sum_3 += input_3[61] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[62] * *filter;
  *sum_1 += input_1[62] * *filter;
  *sum_2 += input_2[62] * *filter;
  *sum_3 += input_3[62] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[63] * *filter;
  *sum_1 += input_1[63] * *filter;
  *sum_2 += input_2[63] * *filter;
  *sum_3 += input_3[63] * *filter;
  filter += output_depth_per_group;
}

static inline void group_mac_kernel8_4row_16col_fp_uniweight_test(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
                      const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter) {
  *sum_0 += input_0[0] * filter[0];
  *sum_1 += input_1[0] * filter[0];
  *sum_2 += input_2[0] * filter[0];
  *sum_3 += input_3[0] * filter[0];
  *sum_0 += input_0[1] * filter[1];
  *sum_1 += input_1[1] * filter[1];
  *sum_2 += input_2[1] * filter[1];
  *sum_3 += input_3[1] * filter[1];
  *sum_0 += input_0[2] * filter[2];
  *sum_1 += input_1[2] * filter[2];
  *sum_2 += input_2[2] * filter[2];
  *sum_3 += input_3[2] * filter[2];
  *sum_0 += input_0[3] * filter[3];
  *sum_1 += input_1[3] * filter[3];
  *sum_2 += input_2[3] * filter[3];
  *sum_3 += input_3[3] * filter[3];
  *sum_0 += input_0[4] * filter[4];
  *sum_1 += input_1[4] * filter[4];
  *sum_2 += input_2[4] * filter[4];
  *sum_3 += input_3[4] * filter[4];
  *sum_0 += input_0[5] * filter[5];
  *sum_1 += input_1[5] * filter[5];
  *sum_2 += input_2[5] * filter[5];
  *sum_3 += input_3[5] * filter[5];
  *sum_0 += input_0[6] * filter[6];
  *sum_1 += input_1[6] * filter[6];
  *sum_2 += input_2[6] * filter[6];
  *sum_3 += input_3[6] * filter[6];
  *sum_0 += input_0[7] * filter[7];
  *sum_1 += input_1[7] * filter[7];
  *sum_2 += input_2[7] * filter[7];
  *sum_3 += input_3[7] * filter[7];
  *sum_0 += input_0[8] * filter[8];
  *sum_1 += input_1[8] * filter[8];
  *sum_2 += input_2[8] * filter[8];
  *sum_3 += input_3[8] * filter[8];
  *sum_0 += input_0[9] * filter[9];
  *sum_1 += input_1[9] * filter[9];
  *sum_2 += input_2[9] * filter[9];
  *sum_3 += input_3[9] * filter[9];

  *sum_0 += input_0[10] * filter[10];
  *sum_1 += input_1[10] * filter[10];
  *sum_2 += input_2[10] * filter[10];
  *sum_3 += input_3[10] * filter[10];
  *sum_0 += input_0[11] * filter[11];
  *sum_1 += input_1[11] * filter[11];
  *sum_2 += input_2[11] * filter[11];
  *sum_3 += input_3[11] * filter[11];
  *sum_0 += input_0[12] * filter[12];
  *sum_1 += input_1[12] * filter[12];
  *sum_2 += input_2[12] * filter[12];
  *sum_3 += input_3[12] * filter[12];
  *sum_0 += input_0[13] * filter[13];
  *sum_1 += input_1[13] * filter[13];
  *sum_2 += input_2[13] * filter[13];
  *sum_3 += input_3[13] * filter[13];
  *sum_0 += input_0[14] * filter[14];
  *sum_1 += input_1[14] * filter[14];
  *sum_2 += input_2[14] * filter[14];
  *sum_3 += input_3[14] * filter[14];
  *sum_0 += input_0[15] * filter[15];
  *sum_1 += input_1[15] * filter[15];
  *sum_2 += input_2[15] * filter[15];
  *sum_3 += input_3[15] * filter[15];
  *sum_0 += input_0[16] * filter[16];
  *sum_1 += input_1[16] * filter[16];
  *sum_2 += input_2[16] * filter[16];
  *sum_3 += input_3[16] * filter[16];
  *sum_0 += input_0[17] * filter[17];
  *sum_1 += input_1[17] * filter[17];
  *sum_2 += input_2[17] * filter[17];
  *sum_3 += input_3[17] * filter[17];
  *sum_0 += input_0[18] * filter[18];
  *sum_1 += input_1[18] * filter[18];
  *sum_2 += input_2[18] * filter[18];
  *sum_3 += input_3[18] * filter[18];
  *sum_0 += input_0[19] * filter[19];
  *sum_1 += input_1[19] * filter[19];
  *sum_2 += input_2[19] * filter[19];
  *sum_3 += input_3[19] * filter[19];

  *sum_0 += input_0[20] * filter[20];
  *sum_1 += input_1[20] * filter[20];
  *sum_2 += input_2[20] * filter[20];
  *sum_3 += input_3[20] * filter[20];
  *sum_0 += input_0[21] * filter[21];
  *sum_1 += input_1[21] * filter[21];
  *sum_2 += input_2[21] * filter[21];
  *sum_3 += input_3[21] * filter[21];
  *sum_0 += input_0[22] * filter[22];
  *sum_1 += input_1[22] * filter[22];
  *sum_2 += input_2[22] * filter[22];
  *sum_3 += input_3[22] * filter[22];
  *sum_0 += input_0[23] * filter[23];
  *sum_1 += input_1[23] * filter[23];
  *sum_2 += input_2[23] * filter[23];
  *sum_3 += input_3[23] * filter[23];
  *sum_0 += input_0[24] * filter[24];
  *sum_1 += input_1[24] * filter[24];
  *sum_2 += input_2[24] * filter[24];
  *sum_3 += input_3[24] * filter[24];
  *sum_0 += input_0[25] * filter[25];
  *sum_1 += input_1[25] * filter[25];
  *sum_2 += input_2[25] * filter[25];
  *sum_3 += input_3[25] * filter[25];
  *sum_0 += input_0[26] * filter[26];
  *sum_1 += input_1[26] * filter[26];
  *sum_2 += input_2[26] * filter[26];
  *sum_3 += input_3[26] * filter[26];
  *sum_0 += input_0[27] * filter[27];
  *sum_1 += input_1[27] * filter[27];
  *sum_2 += input_2[27] * filter[27];
  *sum_3 += input_3[27] * filter[27];
  *sum_0 += input_0[28] * filter[28];
  *sum_1 += input_1[28] * filter[28];
  *sum_2 += input_2[28] * filter[28];
  *sum_3 += input_3[28] * filter[28];
  *sum_0 += input_0[29] * filter[29];
  *sum_1 += input_1[29] * filter[29];
  *sum_2 += input_2[29] * filter[29];
  *sum_3 += input_3[29] * filter[29];
  
  *sum_0 += input_0[30] * filter[30];
  *sum_1 += input_1[30] * filter[30];
  *sum_2 += input_2[30] * filter[30];
  *sum_3 += input_3[30] * filter[30];
  *sum_0 += input_0[31] * filter[31];
  *sum_1 += input_1[31] * filter[31];
  *sum_2 += input_2[31] * filter[31];
  *sum_3 += input_3[31] * filter[31];
  *sum_0 += input_0[32] * filter[32];
  *sum_1 += input_1[32] * filter[32];
  *sum_2 += input_2[32] * filter[32];
  *sum_3 += input_3[32] * filter[32];
  *sum_0 += input_0[33] * filter[33];
  *sum_1 += input_1[33] * filter[33];
  *sum_2 += input_2[33] * filter[33];
  *sum_3 += input_3[33] * filter[33];
  *sum_0 += input_0[34] * filter[34];
  *sum_1 += input_1[34] * filter[34];
  *sum_2 += input_2[34] * filter[34];
  *sum_3 += input_3[34] * filter[34];
  *sum_0 += input_0[35] * filter[35];
  *sum_1 += input_1[35] * filter[35];
  *sum_2 += input_2[35] * filter[35];
  *sum_3 += input_3[35] * filter[35];
  *sum_0 += input_0[36] * filter[36];
  *sum_1 += input_1[36] * filter[36];
  *sum_2 += input_2[36] * filter[36];
  *sum_3 += input_3[36] * filter[36];
  *sum_0 += input_0[37] * filter[37];
  *sum_1 += input_1[37] * filter[37];
  *sum_2 += input_2[37] * filter[37];
  *sum_3 += input_3[37] * filter[37];
  *sum_0 += input_0[38] * filter[38];
  *sum_1 += input_1[38] * filter[38];
  *sum_2 += input_2[38] * filter[38];
  *sum_3 += input_3[38] * filter[38];
  *sum_0 += input_0[39] * filter[39];
  *sum_1 += input_1[39] * filter[39];
  *sum_2 += input_2[39] * filter[39];
  *sum_3 += input_3[39] * filter[39];
  
  *sum_0 += input_0[40] * filter[40];
  *sum_1 += input_1[40] * filter[40];
  *sum_2 += input_2[40] * filter[40];
  *sum_3 += input_3[40] * filter[40];
  *sum_0 += input_0[41] * filter[41];
  *sum_1 += input_1[41] * filter[41];
  *sum_2 += input_2[41] * filter[41];
  *sum_3 += input_3[41] * filter[41];
  *sum_0 += input_0[42] * filter[42];
  *sum_1 += input_1[42] * filter[42];
  *sum_2 += input_2[42] * filter[42];
  *sum_3 += input_3[42] * filter[42];
  *sum_0 += input_0[43] * filter[43];
  *sum_1 += input_1[43] * filter[43];
  *sum_2 += input_2[43] * filter[43];
  *sum_3 += input_3[43] * filter[43];
  *sum_0 += input_0[44] * filter[44];
  *sum_1 += input_1[44] * filter[44];
  *sum_2 += input_2[44] * filter[44];
  *sum_3 += input_3[44] * filter[44];
  *sum_0 += input_0[45] * filter[45];
  *sum_1 += input_1[45] * filter[45];
  *sum_2 += input_2[45] * filter[45];
  *sum_3 += input_3[45] * filter[45];
  *sum_0 += input_0[46] * filter[46];
  *sum_1 += input_1[46] * filter[46];
  *sum_2 += input_2[46] * filter[46];
  *sum_3 += input_3[46] * filter[46];
  *sum_0 += input_0[47] * filter[47];
  *sum_1 += input_1[47] * filter[47];
  *sum_2 += input_2[47] * filter[47];
  *sum_3 += input_3[47] * filter[47];
  *sum_0 += input_0[48] * filter[48];
  *sum_1 += input_1[48] * filter[48];
  *sum_2 += input_2[48] * filter[48];
  *sum_3 += input_3[48] * filter[48];
  *sum_0 += input_0[49] * filter[49];
  *sum_1 += input_1[49] * filter[49];
  *sum_2 += input_2[49] * filter[49];
  *sum_3 += input_3[49] * filter[49];

  *sum_0 += input_0[50] * filter[50];
  *sum_1 += input_1[50] * filter[50];
  *sum_2 += input_2[50] * filter[50];
  *sum_3 += input_3[50] * filter[50];
  *sum_0 += input_0[51] * filter[51];
  *sum_1 += input_1[51] * filter[51];
  *sum_2 += input_2[51] * filter[51];
  *sum_3 += input_3[51] * filter[51];
  *sum_0 += input_0[52] * filter[52];
  *sum_1 += input_1[52] * filter[52];
  *sum_2 += input_2[52] * filter[52];
  *sum_3 += input_3[52] * filter[52];
  *sum_0 += input_0[53] * filter[53];
  *sum_1 += input_1[53] * filter[53];
  *sum_2 += input_2[53] * filter[53];
  *sum_3 += input_3[53] * filter[53];
  *sum_0 += input_0[54] * filter[54];
  *sum_1 += input_1[54] * filter[54];
  *sum_2 += input_2[54] * filter[54];
  *sum_3 += input_3[54] * filter[54];
  *sum_0 += input_0[55] * filter[55];
  *sum_1 += input_1[55] * filter[55];
  *sum_2 += input_2[55] * filter[55];
  *sum_3 += input_3[55] * filter[55];
  *sum_0 += input_0[56] * filter[56];
  *sum_1 += input_1[56] * filter[56];
  *sum_2 += input_2[56] * filter[56];
  *sum_3 += input_3[56] * filter[56];
  *sum_0 += input_0[57] * filter[57];
  *sum_1 += input_1[57] * filter[57];
  *sum_2 += input_2[57] * filter[57];
  *sum_3 += input_3[57] * filter[57];
  *sum_0 += input_0[58] * filter[58];
  *sum_1 += input_1[58] * filter[58];
  *sum_2 += input_2[58] * filter[58];
  *sum_3 += input_3[58] * filter[58];
  *sum_0 += input_0[59] * filter[59];
  *sum_1 += input_1[59] * filter[59];
  *sum_2 += input_2[59] * filter[59];
  *sum_3 += input_3[59] * filter[59];

  *sum_0 += input_0[60] * filter[60];
  *sum_1 += input_1[60] * filter[60];
  *sum_2 += input_2[60] * filter[60];
  *sum_3 += input_3[60] * filter[60];
  *sum_0 += input_0[61] * filter[61];
  *sum_1 += input_1[61] * filter[61];
  *sum_2 += input_2[61] * filter[61];
  *sum_3 += input_3[61] * filter[61];
  *sum_0 += input_0[62] * filter[62];
  *sum_1 += input_1[62] * filter[62];
  *sum_2 += input_2[62] * filter[62];
  *sum_3 += input_3[62] * filter[62];
  *sum_0 += input_0[63] * filter[63];
  *sum_1 += input_1[63] * filter[63];
  *sum_2 += input_2[63] * filter[63];
  *sum_3 += input_3[63] * filter[63];
}

static inline void group_mac_kernel8_4row_fp_uniweight_reuse_output_input(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
           const float* input_0, const float* input_1, const float* input_2, const float* input_3,
           const float* filter) {
    float tmp;
    tmp = 0;
    tmp += input_0[0] * filter[0];
    tmp += input_0[1] * filter[1];
    tmp += input_0[2] * filter[2];
    tmp += input_0[3] * filter[3];
    tmp += input_0[4] * filter[4];
    tmp += input_0[5] * filter[5];
    tmp += input_0[6] * filter[6];
    tmp += input_0[7] * filter[7];
    tmp += input_0[8] * filter[8];
    tmp += input_0[9] * filter[9];
    tmp += input_0[10] * filter[10];
    tmp += input_0[11] * filter[11];
    tmp += input_0[12] * filter[12];
    tmp += input_0[13] * filter[13];
    tmp += input_0[14] * filter[14];
    tmp += input_0[15] * filter[15];
    tmp += input_0[16] * filter[16];
    tmp += input_0[17] * filter[17];
    tmp += input_0[18] * filter[18];
    tmp += input_0[19] * filter[19];
    tmp += input_0[20] * filter[20];
    tmp += input_0[21] * filter[21];
    tmp += input_0[22] * filter[22];
    tmp += input_0[23] * filter[23];
    tmp += input_0[24] * filter[24];
    tmp += input_0[25] * filter[25];
    tmp += input_0[26] * filter[26];
    tmp += input_0[27] * filter[27];
    tmp += input_0[28] * filter[28];
    tmp += input_0[29] * filter[29];
    tmp += input_0[30] * filter[30];
    tmp += input_0[31] * filter[31];
    tmp += input_0[32] * filter[32];
    tmp += input_0[33] * filter[33];
    tmp += input_0[34] * filter[34];
    tmp += input_0[35] * filter[35];
    tmp += input_0[36] * filter[36];
    tmp += input_0[37] * filter[37];
    tmp += input_0[38] * filter[38];
    tmp += input_0[39] * filter[39];
    tmp += input_0[40] * filter[40];
    tmp += input_0[41] * filter[41];
    tmp += input_0[42] * filter[42];
    tmp += input_0[43] * filter[43];
    tmp += input_0[44] * filter[44];
    tmp += input_0[45] * filter[45];
    tmp += input_0[46] * filter[46];
    tmp += input_0[47] * filter[47];
    tmp += input_0[48] * filter[48];
    tmp += input_0[49] * filter[49];
    tmp += input_0[50] * filter[50];
    tmp += input_0[51] * filter[51];
    tmp += input_0[52] * filter[52];
    tmp += input_0[53] * filter[53];
    tmp += input_0[54] * filter[54];
    tmp += input_0[55] * filter[55];
    tmp += input_0[56] * filter[56];
    tmp += input_0[57] * filter[57];
    tmp += input_0[58] * filter[58];
    tmp += input_0[59] * filter[59];
    tmp += input_0[60] * filter[60];
    tmp += input_0[61] * filter[61];
    tmp += input_0[62] * filter[62];
    tmp += input_0[63] * filter[63];
    *sum_0 += tmp;
    tmp = 0;
    tmp += input_1[0] * filter[0];
    tmp += input_1[1] * filter[1];
    tmp += input_1[2] * filter[2];
    tmp += input_1[3] * filter[3];
    tmp += input_1[4] * filter[4];
    tmp += input_1[5] * filter[5];
    tmp += input_1[6] * filter[6];
    tmp += input_1[7] * filter[7];
    tmp += input_1[8] * filter[8];
    tmp += input_1[9] * filter[9];
    tmp += input_1[10] * filter[10];
    tmp += input_1[11] * filter[11];
    tmp += input_1[12] * filter[12];
    tmp += input_1[13] * filter[13];
    tmp += input_1[14] * filter[14];
    tmp += input_1[15] * filter[15];
    tmp += input_1[16] * filter[16];
    tmp += input_1[17] * filter[17];
    tmp += input_1[18] * filter[18];
    tmp += input_1[19] * filter[19];
    tmp += input_1[20] * filter[20];
    tmp += input_1[21] * filter[21];
    tmp += input_1[22] * filter[22];
    tmp += input_1[23] * filter[23];
    tmp += input_1[24] * filter[24];
    tmp += input_1[25] * filter[25];
    tmp += input_1[26] * filter[26];
    tmp += input_1[27] * filter[27];
    tmp += input_1[28] * filter[28];
    tmp += input_1[29] * filter[29];
    tmp += input_1[30] * filter[30];
    tmp += input_1[31] * filter[31];
    tmp += input_1[32] * filter[32];
    tmp += input_1[33] * filter[33];
    tmp += input_1[34] * filter[34];
    tmp += input_1[35] * filter[35];
    tmp += input_1[36] * filter[36];
    tmp += input_1[37] * filter[37];
    tmp += input_1[38] * filter[38];
    tmp += input_1[39] * filter[39];
    tmp += input_1[40] * filter[40];
    tmp += input_1[41] * filter[41];
    tmp += input_1[42] * filter[42];
    tmp += input_1[43] * filter[43];
    tmp += input_1[44] * filter[44];
    tmp += input_1[45] * filter[45];
    tmp += input_1[46] * filter[46];
    tmp += input_1[47] * filter[47];
    tmp += input_1[48] * filter[48];
    tmp += input_1[49] * filter[49];
    tmp += input_1[50] * filter[50];
    tmp += input_1[51] * filter[51];
    tmp += input_1[52] * filter[52];
    tmp += input_1[53] * filter[53];
    tmp += input_1[54] * filter[54];
    tmp += input_1[55] * filter[55];
    tmp += input_1[56] * filter[56];
    tmp += input_1[57] * filter[57];
    tmp += input_1[58] * filter[58];
    tmp += input_1[59] * filter[59];
    tmp += input_1[60] * filter[60];
    tmp += input_1[61] * filter[61];
    tmp += input_1[62] * filter[62];
    tmp += input_1[63] * filter[63];
    *sum_1 += tmp;
    tmp = 0;
    tmp += input_2[0] * filter[0];
    tmp += input_2[1] * filter[1];
    tmp += input_2[2] * filter[2];
    tmp += input_2[3] * filter[3];
    tmp += input_2[4] * filter[4];
    tmp += input_2[5] * filter[5];
    tmp += input_2[6] * filter[6];
    tmp += input_2[7] * filter[7];
    tmp += input_2[8] * filter[8];
    tmp += input_2[9] * filter[9];
    tmp += input_2[10] * filter[10];
    tmp += input_2[11] * filter[11];
    tmp += input_2[12] * filter[12];
    tmp += input_2[13] * filter[13];
    tmp += input_2[14] * filter[14];
    tmp += input_2[15] * filter[15];
    tmp += input_2[16] * filter[16];
    tmp += input_2[17] * filter[17];
    tmp += input_2[18] * filter[18];
    tmp += input_2[19] * filter[19];
    tmp += input_2[20] * filter[20];
    tmp += input_2[21] * filter[21];
    tmp += input_2[22] * filter[22];
    tmp += input_2[23] * filter[23];
    tmp += input_2[24] * filter[24];
    tmp += input_2[25] * filter[25];
    tmp += input_2[26] * filter[26];
    tmp += input_2[27] * filter[27];
    tmp += input_2[28] * filter[28];
    tmp += input_2[29] * filter[29];
    tmp += input_2[30] * filter[30];
    tmp += input_2[31] * filter[31];
    tmp += input_2[32] * filter[32];
    tmp += input_2[33] * filter[33];
    tmp += input_2[34] * filter[34];
    tmp += input_2[35] * filter[35];
    tmp += input_2[36] * filter[36];
    tmp += input_2[37] * filter[37];
    tmp += input_2[38] * filter[38];
    tmp += input_2[39] * filter[39];
    tmp += input_2[40] * filter[40];
    tmp += input_2[41] * filter[41];
    tmp += input_2[42] * filter[42];
    tmp += input_2[43] * filter[43];
    tmp += input_2[44] * filter[44];
    tmp += input_2[45] * filter[45];
    tmp += input_2[46] * filter[46];
    tmp += input_2[47] * filter[47];
    tmp += input_2[48] * filter[48];
    tmp += input_2[49] * filter[49];
    tmp += input_2[50] * filter[50];
    tmp += input_2[51] * filter[51];
    tmp += input_2[52] * filter[52];
    tmp += input_2[53] * filter[53];
    tmp += input_2[54] * filter[54];
    tmp += input_2[55] * filter[55];
    tmp += input_2[56] * filter[56];
    tmp += input_2[57] * filter[57];
    tmp += input_2[58] * filter[58];
    tmp += input_2[59] * filter[59];
    tmp += input_2[60] * filter[60];
    tmp += input_2[61] * filter[61];
    tmp += input_2[62] * filter[62];
    tmp += input_2[63] * filter[63];
    *sum_2 += tmp;
    tmp = 0;
    tmp += input_3[0] * filter[0];
    tmp += input_3[1] * filter[1];
    tmp += input_3[2] * filter[2];
    tmp += input_3[3] * filter[3];
    tmp += input_3[4] * filter[4];
    tmp += input_3[5] * filter[5];
    tmp += input_3[6] * filter[6];
    tmp += input_3[7] * filter[7];
    tmp += input_3[8] * filter[8];
    tmp += input_3[9] * filter[9];
    tmp += input_3[10] * filter[10];
    tmp += input_3[11] * filter[11];
    tmp += input_3[12] * filter[12];
    tmp += input_3[13] * filter[13];
    tmp += input_3[14] * filter[14];
    tmp += input_3[15] * filter[15];
    tmp += input_3[16] * filter[16];
    tmp += input_3[17] * filter[17];
    tmp += input_3[18] * filter[18];
    tmp += input_3[19] * filter[19];
    tmp += input_3[20] * filter[20];
    tmp += input_3[21] * filter[21];
    tmp += input_3[22] * filter[22];
    tmp += input_3[23] * filter[23];
    tmp += input_3[24] * filter[24];
    tmp += input_3[25] * filter[25];
    tmp += input_3[26] * filter[26];
    tmp += input_3[27] * filter[27];
    tmp += input_3[28] * filter[28];
    tmp += input_3[29] * filter[29];
    tmp += input_3[30] * filter[30];
    tmp += input_3[31] * filter[31];
    tmp += input_3[32] * filter[32];
    tmp += input_3[33] * filter[33];
    tmp += input_3[34] * filter[34];
    tmp += input_3[35] * filter[35];
    tmp += input_3[36] * filter[36];
    tmp += input_3[37] * filter[37];
    tmp += input_3[38] * filter[38];
    tmp += input_3[39] * filter[39];
    tmp += input_3[40] * filter[40];
    tmp += input_3[41] * filter[41];
    tmp += input_3[42] * filter[42];
    tmp += input_3[43] * filter[43];
    tmp += input_3[44] * filter[44];
    tmp += input_3[45] * filter[45];
    tmp += input_3[46] * filter[46];
    tmp += input_3[47] * filter[47];
    tmp += input_3[48] * filter[48];
    tmp += input_3[49] * filter[49];
    tmp += input_3[50] * filter[50];
    tmp += input_3[51] * filter[51];
    tmp += input_3[52] * filter[52];
    tmp += input_3[53] * filter[53];
    tmp += input_3[54] * filter[54];
    tmp += input_3[55] * filter[55];
    tmp += input_3[56] * filter[56];
    tmp += input_3[57] * filter[57];
    tmp += input_3[58] * filter[58];
    tmp += input_3[59] * filter[59];
    tmp += input_3[60] * filter[60];
    tmp += input_3[61] * filter[61];
    tmp += input_3[62] * filter[62];
    tmp += input_3[63] * filter[63];
    *sum_3 += tmp;
}
// a better version

static inline void group_mac_kernel8_4row_16col_fp_uniweight(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
                      const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  *sum_2 += input_2[0] * *filter;
  *sum_3 += input_3[0] * *filter++;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  *sum_2 += input_2[1] * *filter;
  *sum_3 += input_3[1] * *filter++;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  *sum_2 += input_2[2] * *filter;
  *sum_3 += input_3[2] * *filter++;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  *sum_2 += input_2[3] * *filter;
  *sum_3 += input_3[3] * *filter++;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  *sum_2 += input_2[4] * *filter;
  *sum_3 += input_3[4] * *filter++;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  *sum_2 += input_2[5] * *filter;
  *sum_3 += input_3[5] * *filter++;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  *sum_2 += input_2[6] * *filter;
  *sum_3 += input_3[6] * *filter++;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  *sum_2 += input_2[7] * *filter;
  *sum_3 += input_3[7] * *filter++;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  *sum_2 += input_2[8] * *filter;
  *sum_3 += input_3[8] * *filter++;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter;
  *sum_2 += input_2[9] * *filter;
  *sum_3 += input_3[9] * *filter++;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter;
  *sum_2 += input_2[10] * *filter;
  *sum_3 += input_3[10] * *filter++;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter;
  *sum_2 += input_2[11] * *filter;
  *sum_3 += input_3[11] * *filter++;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter;
  *sum_2 += input_2[12] * *filter;
  *sum_3 += input_3[12] * *filter++;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter;
  *sum_2 += input_2[13] * *filter;
  *sum_3 += input_3[13] * *filter++;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter;
  *sum_2 += input_2[14] * *filter;
  *sum_3 += input_3[14] * *filter++;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter;
  *sum_2 += input_2[15] * *filter;
  *sum_3 += input_3[15] * *filter++;
  *sum_0 += input_0[16] * *filter;
  *sum_1 += input_1[16] * *filter;
  *sum_2 += input_2[16] * *filter;
  *sum_3 += input_3[16] * *filter++;
  *sum_0 += input_0[17] * *filter;
  *sum_1 += input_1[17] * *filter;
  *sum_2 += input_2[17] * *filter;
  *sum_3 += input_3[17] * *filter++;
  *sum_0 += input_0[18] * *filter;
  *sum_1 += input_1[18] * *filter;
  *sum_2 += input_2[18] * *filter;
  *sum_3 += input_3[18] * *filter++;
  *sum_0 += input_0[19] * *filter;
  *sum_1 += input_1[19] * *filter;
  *sum_2 += input_2[19] * *filter;
  *sum_3 += input_3[19] * *filter++;

  *sum_0 += input_0[20] * *filter;
  *sum_1 += input_1[20] * *filter;
  *sum_2 += input_2[20] * *filter;
  *sum_3 += input_3[20] * *filter++;
  *sum_0 += input_0[21] * *filter;
  *sum_1 += input_1[21] * *filter;
  *sum_2 += input_2[21] * *filter;
  *sum_3 += input_3[21] * *filter++;
  *sum_0 += input_0[22] * *filter;
  *sum_1 += input_1[22] * *filter;
  *sum_2 += input_2[22] * *filter;
  *sum_3 += input_3[22] * *filter++;
  *sum_0 += input_0[23] * *filter;
  *sum_1 += input_1[23] * *filter;
  *sum_2 += input_2[23] * *filter;
  *sum_3 += input_3[23] * *filter++;
  *sum_0 += input_0[24] * *filter;
  *sum_1 += input_1[24] * *filter;
  *sum_2 += input_2[24] * *filter;
  *sum_3 += input_3[24] * *filter++;
  *sum_0 += input_0[25] * *filter;
  *sum_1 += input_1[25] * *filter;
  *sum_2 += input_2[25] * *filter;
  *sum_3 += input_3[25] * *filter++;
  *sum_0 += input_0[26] * *filter;
  *sum_1 += input_1[26] * *filter;
  *sum_2 += input_2[26] * *filter;
  *sum_3 += input_3[26] * *filter++;
  *sum_0 += input_0[27] * *filter;
  *sum_1 += input_1[27] * *filter;
  *sum_2 += input_2[27] * *filter;
  *sum_3 += input_3[27] * *filter++;
  *sum_0 += input_0[28] * *filter;
  *sum_1 += input_1[28] * *filter;
  *sum_2 += input_2[28] * *filter;
  *sum_3 += input_3[28] * *filter++;
  *sum_0 += input_0[29] * *filter;
  *sum_1 += input_1[29] * *filter;
  *sum_2 += input_2[29] * *filter;
  *sum_3 += input_3[29] * *filter++;
  
  *sum_0 += input_0[30] * *filter;
  *sum_1 += input_1[30] * *filter;
  *sum_2 += input_2[30] * *filter;
  *sum_3 += input_3[30] * *filter++;
  *sum_0 += input_0[31] * *filter;
  *sum_1 += input_1[31] * *filter;
  *sum_2 += input_2[31] * *filter;
  *sum_3 += input_3[31] * *filter++;
  *sum_0 += input_0[32] * *filter;
  *sum_1 += input_1[32] * *filter;
  *sum_2 += input_2[32] * *filter;
  *sum_3 += input_3[32] * *filter++;
  *sum_0 += input_0[33] * *filter;
  *sum_1 += input_1[33] * *filter;
  *sum_2 += input_2[33] * *filter;
  *sum_3 += input_3[33] * *filter++;
  *sum_0 += input_0[34] * *filter;
  *sum_1 += input_1[34] * *filter;
  *sum_2 += input_2[34] * *filter;
  *sum_3 += input_3[34] * *filter++;
  *sum_0 += input_0[35] * *filter;
  *sum_1 += input_1[35] * *filter;
  *sum_2 += input_2[35] * *filter;
  *sum_3 += input_3[35] * *filter++;
  *sum_0 += input_0[36] * *filter;
  *sum_1 += input_1[36] * *filter;
  *sum_2 += input_2[36] * *filter;
  *sum_3 += input_3[36] * *filter++;
  *sum_0 += input_0[37] * *filter;
  *sum_1 += input_1[37] * *filter;
  *sum_2 += input_2[37] * *filter;
  *sum_3 += input_3[37] * *filter++;
  *sum_0 += input_0[38] * *filter;
  *sum_1 += input_1[38] * *filter;
  *sum_2 += input_2[38] * *filter;
  *sum_3 += input_3[38] * *filter++;
  *sum_0 += input_0[39] * *filter;
  *sum_1 += input_1[39] * *filter;
  *sum_2 += input_2[39] * *filter;
  *sum_3 += input_3[39] * *filter++;
  
  *sum_0 += input_0[40] * *filter;
  *sum_1 += input_1[40] * *filter;
  *sum_2 += input_2[40] * *filter;
  *sum_3 += input_3[40] * *filter++;
  *sum_0 += input_0[41] * *filter;
  *sum_1 += input_1[41] * *filter;
  *sum_2 += input_2[41] * *filter;
  *sum_3 += input_3[41] * *filter++;
  *sum_0 += input_0[42] * *filter;
  *sum_1 += input_1[42] * *filter;
  *sum_2 += input_2[42] * *filter;
  *sum_3 += input_3[42] * *filter++;
  *sum_0 += input_0[43] * *filter;
  *sum_1 += input_1[43] * *filter;
  *sum_2 += input_2[43] * *filter;
  *sum_3 += input_3[43] * *filter++;
  *sum_0 += input_0[44] * *filter;
  *sum_1 += input_1[44] * *filter;
  *sum_2 += input_2[44] * *filter;
  *sum_3 += input_3[44] * *filter++;
  *sum_0 += input_0[45] * *filter;
  *sum_1 += input_1[45] * *filter;
  *sum_2 += input_2[45] * *filter;
  *sum_3 += input_3[45] * *filter++;
  *sum_0 += input_0[46] * *filter;
  *sum_1 += input_1[46] * *filter;
  *sum_2 += input_2[46] * *filter;
  *sum_3 += input_3[46] * *filter++;
  *sum_0 += input_0[47] * *filter;
  *sum_1 += input_1[47] * *filter;
  *sum_2 += input_2[47] * *filter;
  *sum_3 += input_3[47] * *filter++;
  *sum_0 += input_0[48] * *filter;
  *sum_1 += input_1[48] * *filter;
  *sum_2 += input_2[48] * *filter;
  *sum_3 += input_3[48] * *filter++;
  *sum_0 += input_0[49] * *filter;
  *sum_1 += input_1[49] * *filter;
  *sum_2 += input_2[49] * *filter;
  *sum_3 += input_3[49] * *filter++;

  *sum_0 += input_0[50] * *filter;
  *sum_1 += input_1[50] * *filter;
  *sum_2 += input_2[50] * *filter;
  *sum_3 += input_3[50] * *filter++;
  *sum_0 += input_0[51] * *filter;
  *sum_1 += input_1[51] * *filter;
  *sum_2 += input_2[51] * *filter;
  *sum_3 += input_3[51] * *filter++;
  *sum_0 += input_0[52] * *filter;
  *sum_1 += input_1[52] * *filter;
  *sum_2 += input_2[52] * *filter;
  *sum_3 += input_3[52] * *filter++;
  *sum_0 += input_0[53] * *filter;
  *sum_1 += input_1[53] * *filter;
  *sum_2 += input_2[53] * *filter;
  *sum_3 += input_3[53] * *filter++;
  *sum_0 += input_0[54] * *filter;
  *sum_1 += input_1[54] * *filter;
  *sum_2 += input_2[54] * *filter;
  *sum_3 += input_3[54] * *filter++;
  *sum_0 += input_0[55] * *filter;
  *sum_1 += input_1[55] * *filter;
  *sum_2 += input_2[55] * *filter;
  *sum_3 += input_3[55] * *filter++;
  *sum_0 += input_0[56] * *filter;
  *sum_1 += input_1[56] * *filter;
  *sum_2 += input_2[56] * *filter;
  *sum_3 += input_3[56] * *filter++;
  *sum_0 += input_0[57] * *filter;
  *sum_1 += input_1[57] * *filter;
  *sum_2 += input_2[57] * *filter;
  *sum_3 += input_3[57] * *filter++;
  *sum_0 += input_0[58] * *filter;
  *sum_1 += input_1[58] * *filter;
  *sum_2 += input_2[58] * *filter;
  *sum_3 += input_3[58] * *filter++;
  *sum_0 += input_0[59] * *filter;
  *sum_1 += input_1[59] * *filter;
  *sum_2 += input_2[59] * *filter;
  *sum_3 += input_3[59] * *filter++;

  *sum_0 += input_0[60] * *filter;
  *sum_1 += input_1[60] * *filter;
  *sum_2 += input_2[60] * *filter;
  *sum_3 += input_3[60] * *filter++;
  *sum_0 += input_0[61] * *filter;
  *sum_1 += input_1[61] * *filter;
  *sum_2 += input_2[61] * *filter;
  *sum_3 += input_3[61] * *filter++;
  *sum_0 += input_0[62] * *filter;
  *sum_1 += input_1[62] * *filter;
  *sum_2 += input_2[62] * *filter;
  *sum_3 += input_3[62] * *filter++;
  *sum_0 += input_0[63] * *filter;
  *sum_1 += input_1[63] * *filter;
  *sum_2 += input_2[63] * *filter;
  *sum_3 += input_3[63] * *filter++;
}

static inline void group_mac_kernel8_2row_16col_fp_uniweight_IOHW(float* sum_0, float* sum_1,
                      const float* input_0, const float* input_1, 
                      const float* filter, const int output_depth_per_group) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[16] * *filter;
  *sum_1 += input_1[16] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[17] * *filter;
  *sum_1 += input_1[17] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[18] * *filter;
  *sum_1 += input_1[18] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[19] * *filter;
  *sum_1 += input_1[19] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[20] * *filter;
  *sum_1 += input_1[20] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[21] * *filter;
  *sum_1 += input_1[21] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[22] * *filter;
  *sum_1 += input_1[22] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[23] * *filter;
  *sum_1 += input_1[23] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[24] * *filter;
  *sum_1 += input_1[24] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[25] * *filter;
  *sum_1 += input_1[25] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[26] * *filter;
  *sum_1 += input_1[26] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[27] * *filter;
  *sum_1 += input_1[27] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[28] * *filter;
  *sum_1 += input_1[28] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[29] * *filter;
  *sum_1 += input_1[29] * *filter;
  filter += output_depth_per_group;
  
  *sum_0 += input_0[30] * *filter;
  *sum_1 += input_1[30] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[31] * *filter;
  *sum_1 += input_1[31] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[32] * *filter;
  *sum_1 += input_1[32] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[33] * *filter;
  *sum_1 += input_1[33] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[34] * *filter;
  *sum_1 += input_1[34] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[35] * *filter;
  *sum_1 += input_1[35] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[36] * *filter;
  *sum_1 += input_1[36] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[37] * *filter;
  *sum_1 += input_1[37] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[38] * *filter;
  *sum_1 += input_1[38] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[39] * *filter;
  *sum_1 += input_1[39] * *filter;
  filter += output_depth_per_group;
  
  *sum_0 += input_0[40] * *filter;
  *sum_1 += input_1[40] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[41] * *filter;
  *sum_1 += input_1[41] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[42] * *filter;
  *sum_1 += input_1[42] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[43] * *filter;
  *sum_1 += input_1[43] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[44] * *filter;
  *sum_1 += input_1[44] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[45] * *filter;
  *sum_1 += input_1[45] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[46] * *filter;
  *sum_1 += input_1[46] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[47] * *filter;
  *sum_1 += input_1[47] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[48] * *filter;
  *sum_1 += input_1[48] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[49] * *filter;
  *sum_1 += input_1[49] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[50] * *filter;
  *sum_1 += input_1[50] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[51] * *filter;
  *sum_1 += input_1[51] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[52] * *filter;
  *sum_1 += input_1[52] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[53] * *filter;
  *sum_1 += input_1[53] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[54] * *filter;
  *sum_1 += input_1[54] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[55] * *filter;
  *sum_1 += input_1[55] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[56] * *filter;
  *sum_1 += input_1[56] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[57] * *filter;
  *sum_1 += input_1[57] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[58] * *filter;
  *sum_1 += input_1[58] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[59] * *filter;
  *sum_1 += input_1[59] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[60] * *filter;
  *sum_1 += input_1[60] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[61] * *filter;
  *sum_1 += input_1[61] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[62] * *filter;
  *sum_1 += input_1[62] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[63] * *filter;
  *sum_1 += input_1[63] * *filter;
  filter += output_depth_per_group;
}

static inline void group_mac_kernel8_2row_32col_fp_uniweight_IOHW(float* sum_0, float* sum_1, const float* input_0, const float* input_1, 
                      const float* filter, const int output_depth_per_group) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[16] * *filter;
  *sum_1 += input_1[16] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[17] * *filter;
  *sum_1 += input_1[17] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[18] * *filter;
  *sum_1 += input_1[18] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[19] * *filter;
  *sum_1 += input_1[19] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[20] * *filter;
  *sum_1 += input_1[20] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[21] * *filter;
  *sum_1 += input_1[21] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[22] * *filter;
  *sum_1 += input_1[22] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[23] * *filter;
  *sum_1 += input_1[23] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[24] * *filter;
  *sum_1 += input_1[24] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[25] * *filter;
  *sum_1 += input_1[25] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[26] * *filter;
  *sum_1 += input_1[26] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[27] * *filter;
  *sum_1 += input_1[27] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[28] * *filter;
  *sum_1 += input_1[28] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[29] * *filter;
  *sum_1 += input_1[29] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[30] * *filter;
  *sum_1 += input_1[30] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[31] * *filter;
  *sum_1 += input_1[31] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[32] * *filter;
  *sum_1 += input_1[32] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[33] * *filter;
  *sum_1 += input_1[33] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[34] * *filter;
  *sum_1 += input_1[34] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[35] * *filter;
  *sum_1 += input_1[35] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[36] * *filter;
  *sum_1 += input_1[36] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[37] * *filter;
  *sum_1 += input_1[37] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[38] * *filter;
  *sum_1 += input_1[38] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[39] * *filter;
  *sum_1 += input_1[39] * *filter;
  filter += output_depth_per_group;
  
  *sum_0 += input_0[40] * *filter;
  *sum_1 += input_1[40] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[41] * *filter;
  *sum_1 += input_1[41] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[42] * *filter;
  *sum_1 += input_1[42] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[43] * *filter;
  *sum_1 += input_1[43] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[44] * *filter;
  *sum_1 += input_1[44] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[45] * *filter;
  *sum_1 += input_1[45] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[46] * *filter;
  *sum_1 += input_1[46] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[47] * *filter;
  *sum_1 += input_1[47] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[48] * *filter;
  *sum_1 += input_1[48] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[49] * *filter;
  *sum_1 += input_1[49] * *filter;
  filter += output_depth_per_group;
  
  *sum_0 += input_0[50] * *filter;
  *sum_1 += input_1[50] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[51] * *filter;
  *sum_1 += input_1[51] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[52] * *filter;
  *sum_1 += input_1[52] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[53] * *filter;
  *sum_1 += input_1[53] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[54] * *filter;
  *sum_1 += input_1[54] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[55] * *filter;
  *sum_1 += input_1[55] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[56] * *filter;
  *sum_1 += input_1[56] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[57] * *filter;
  *sum_1 += input_1[57] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[58] * *filter;
  *sum_1 += input_1[58] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[59] * *filter;
  *sum_1 += input_1[59] * *filter;
  filter += output_depth_per_group;
  
  *sum_0 += input_0[60] * *filter;
  *sum_1 += input_1[60] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[61] * *filter;
  *sum_1 += input_1[61] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[62] * *filter;
  *sum_1 += input_1[62] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[63] * *filter;
  *sum_1 += input_1[63] * *filter;
  filter += output_depth_per_group;
}

static inline void group_mac_kernel8_2row_32col_fp_uniweight(float* sum_0, float* sum_1, const float* input_0, const float* input_1, 
                      const float* filter) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter++;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter++;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter++;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter++;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter++;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter++;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter++;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter++;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter++;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter++;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter++;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter++;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter++;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter++;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter++;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter++;
  *sum_0 += input_0[16] * *filter;
  *sum_1 += input_1[16] * *filter++;
  *sum_0 += input_0[17] * *filter;
  *sum_1 += input_1[17] * *filter++;
  *sum_0 += input_0[18] * *filter;
  *sum_1 += input_1[18] * *filter++;
  *sum_0 += input_0[19] * *filter;
  *sum_1 += input_1[19] * *filter++;

  *sum_0 += input_0[20] * *filter;
  *sum_1 += input_1[20] * *filter++;
  *sum_0 += input_0[21] * *filter;
  *sum_1 += input_1[21] * *filter++;
  *sum_0 += input_0[22] * *filter;
  *sum_1 += input_1[22] * *filter++;
  *sum_0 += input_0[23] * *filter;
  *sum_1 += input_1[23] * *filter++;
  *sum_0 += input_0[24] * *filter;
  *sum_1 += input_1[24] * *filter++;
  *sum_0 += input_0[25] * *filter;
  *sum_1 += input_1[25] * *filter++;
  *sum_0 += input_0[26] * *filter;
  *sum_1 += input_1[26] * *filter++;
  *sum_0 += input_0[27] * *filter;
  *sum_1 += input_1[27] * *filter++;
  *sum_0 += input_0[28] * *filter;
  *sum_1 += input_1[28] * *filter++;
  *sum_0 += input_0[29] * *filter;
  *sum_1 += input_1[29] * *filter++;

  *sum_0 += input_0[30] * *filter;
  *sum_1 += input_1[30] * *filter++;
  *sum_0 += input_0[31] * *filter;
  *sum_1 += input_1[31] * *filter++;
  *sum_0 += input_0[32] * *filter;
  *sum_1 += input_1[32] * *filter++;
  *sum_0 += input_0[33] * *filter;
  *sum_1 += input_1[33] * *filter++;
  *sum_0 += input_0[34] * *filter;
  *sum_1 += input_1[34] * *filter++;
  *sum_0 += input_0[35] * *filter;
  *sum_1 += input_1[35] * *filter++;
  *sum_0 += input_0[36] * *filter;
  *sum_1 += input_1[36] * *filter++;
  *sum_0 += input_0[37] * *filter;
  *sum_1 += input_1[37] * *filter++;
  *sum_0 += input_0[38] * *filter;
  *sum_1 += input_1[38] * *filter++;
  *sum_0 += input_0[39] * *filter;
  *sum_1 += input_1[39] * *filter++;
  
  *sum_0 += input_0[40] * *filter;
  *sum_1 += input_1[40] * *filter++;
  *sum_0 += input_0[41] * *filter;
  *sum_1 += input_1[41] * *filter++;
  *sum_0 += input_0[42] * *filter;
  *sum_1 += input_1[42] * *filter++;
  *sum_0 += input_0[43] * *filter;
  *sum_1 += input_1[43] * *filter++;
  *sum_0 += input_0[44] * *filter;
  *sum_1 += input_1[44] * *filter++;
  *sum_0 += input_0[45] * *filter;
  *sum_1 += input_1[45] * *filter++;
  *sum_0 += input_0[46] * *filter;
  *sum_1 += input_1[46] * *filter++;
  *sum_0 += input_0[47] * *filter;
  *sum_1 += input_1[47] * *filter++;
  *sum_0 += input_0[48] * *filter;
  *sum_1 += input_1[48] * *filter++;
  *sum_0 += input_0[49] * *filter;
  *sum_1 += input_1[49] * *filter++;
  
  *sum_0 += input_0[50] * *filter;
  *sum_1 += input_1[50] * *filter++;
  *sum_0 += input_0[51] * *filter;
  *sum_1 += input_1[51] * *filter++;
  *sum_0 += input_0[52] * *filter;
  *sum_1 += input_1[52] * *filter++;
  *sum_0 += input_0[53] * *filter;
  *sum_1 += input_1[53] * *filter++;
  *sum_0 += input_0[54] * *filter;
  *sum_1 += input_1[54] * *filter++;
  *sum_0 += input_0[55] * *filter;
  *sum_1 += input_1[55] * *filter++;
  *sum_0 += input_0[56] * *filter;
  *sum_1 += input_1[56] * *filter++;
  *sum_0 += input_0[57] * *filter;
  *sum_1 += input_1[57] * *filter++;
  *sum_0 += input_0[58] * *filter;
  *sum_1 += input_1[58] * *filter++;
  *sum_0 += input_0[59] * *filter;
  *sum_1 += input_1[59] * *filter++;
  
  *sum_0 += input_0[60] * *filter;
  *sum_1 += input_1[60] * *filter++;
  *sum_0 += input_0[61] * *filter;
  *sum_1 += input_1[61] * *filter++;
  *sum_0 += input_0[62] * *filter;
  *sum_1 += input_1[62] * *filter++;
  *sum_0 += input_0[63] * *filter;
  *sum_1 += input_1[63] * *filter++;
}
/* END: For 8x8 kernel size, stride1_pad0_in8x8_out1x1_uniweight */

/* START: For 5x5 kernel size, stride1_pad0_in5x5_out1x1_uniweight */
static inline void group_mac_kernel5_4row_16col_fp_uniweight_IOHW(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
                      const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter, const int output_depth_per_group) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  *sum_2 += input_2[0] * *filter;
  *sum_3 += input_3[0] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  *sum_2 += input_2[1] * *filter;
  *sum_3 += input_3[1] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  *sum_2 += input_2[2] * *filter;
  *sum_3 += input_3[2] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  *sum_2 += input_2[3] * *filter;
  *sum_3 += input_3[3] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  *sum_2 += input_2[4] * *filter;
  *sum_3 += input_3[4] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  *sum_2 += input_2[5] * *filter;
  *sum_3 += input_3[5] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  *sum_2 += input_2[6] * *filter;
  *sum_3 += input_3[6] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  *sum_2 += input_2[7] * *filter;
  *sum_3 += input_3[7] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  *sum_2 += input_2[8] * *filter;
  *sum_3 += input_3[8] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter;
  *sum_2 += input_2[9] * *filter;
  *sum_3 += input_3[9] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter;
  *sum_2 += input_2[10] * *filter;
  *sum_3 += input_3[10] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter;
  *sum_2 += input_2[11] * *filter;
  *sum_3 += input_3[11] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter;
  *sum_2 += input_2[12] * *filter;
  *sum_3 += input_3[12] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter;
  *sum_2 += input_2[13] * *filter;
  *sum_3 += input_3[13] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter;
  *sum_2 += input_2[14] * *filter;
  *sum_3 += input_3[14] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter;
  *sum_2 += input_2[15] * *filter;
  *sum_3 += input_3[15] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[16] * *filter;
  *sum_1 += input_1[16] * *filter;
  *sum_2 += input_2[16] * *filter;
  *sum_3 += input_3[16] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[17] * *filter;
  *sum_1 += input_1[17] * *filter;
  *sum_2 += input_2[17] * *filter;
  *sum_3 += input_3[17] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[18] * *filter;
  *sum_1 += input_1[18] * *filter;
  *sum_2 += input_2[18] * *filter;
  *sum_3 += input_3[18] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[19] * *filter;
  *sum_1 += input_1[19] * *filter;
  *sum_2 += input_2[19] * *filter;
  *sum_3 += input_3[19] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[20] * *filter;
  *sum_1 += input_1[20] * *filter;
  *sum_2 += input_2[20] * *filter;
  *sum_3 += input_3[20] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[21] * *filter;
  *sum_1 += input_1[21] * *filter;
  *sum_2 += input_2[21] * *filter;
  *sum_3 += input_3[21] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[22] * *filter;
  *sum_1 += input_1[22] * *filter;
  *sum_2 += input_2[22] * *filter;
  *sum_3 += input_3[22] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[23] * *filter;
  *sum_1 += input_1[23] * *filter;
  *sum_2 += input_2[23] * *filter;
  *sum_3 += input_3[23] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[24] * *filter;
  *sum_1 += input_1[24] * *filter;
  *sum_2 += input_2[24] * *filter;
  *sum_3 += input_3[24] * *filter;
  filter += output_depth_per_group;
}

static inline void group_mac_kernel5_4row_16col_fp_uniweight(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
                      const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  *sum_2 += input_2[0] * *filter;
  *sum_3 += input_3[0] * *filter++;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  *sum_2 += input_2[1] * *filter;
  *sum_3 += input_3[1] * *filter++;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  *sum_2 += input_2[2] * *filter;
  *sum_3 += input_3[2] * *filter++;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  *sum_2 += input_2[3] * *filter;
  *sum_3 += input_3[3] * *filter++;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  *sum_2 += input_2[4] * *filter;
  *sum_3 += input_3[4] * *filter++;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  *sum_2 += input_2[5] * *filter;
  *sum_3 += input_3[5] * *filter++;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  *sum_2 += input_2[6] * *filter;
  *sum_3 += input_3[6] * *filter++;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  *sum_2 += input_2[7] * *filter;
  *sum_3 += input_3[7] * *filter++;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  *sum_2 += input_2[8] * *filter;
  *sum_3 += input_3[8] * *filter++;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter;
  *sum_2 += input_2[9] * *filter;
  *sum_3 += input_3[9] * *filter++;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter;
  *sum_2 += input_2[10] * *filter;
  *sum_3 += input_3[10] * *filter++;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter;
  *sum_2 += input_2[11] * *filter;
  *sum_3 += input_3[11] * *filter++;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter;
  *sum_2 += input_2[12] * *filter;
  *sum_3 += input_3[12] * *filter++;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter;
  *sum_2 += input_2[13] * *filter;
  *sum_3 += input_3[13] * *filter++;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter;
  *sum_2 += input_2[14] * *filter;
  *sum_3 += input_3[14] * *filter++;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter;
  *sum_2 += input_2[15] * *filter;
  *sum_3 += input_3[15] * *filter++;
  *sum_0 += input_0[16] * *filter;
  *sum_1 += input_1[16] * *filter;
  *sum_2 += input_2[16] * *filter;
  *sum_3 += input_3[16] * *filter++;
  *sum_0 += input_0[17] * *filter;
  *sum_1 += input_1[17] * *filter;
  *sum_2 += input_2[17] * *filter;
  *sum_3 += input_3[17] * *filter++;
  *sum_0 += input_0[18] * *filter;
  *sum_1 += input_1[18] * *filter;
  *sum_2 += input_2[18] * *filter;
  *sum_3 += input_3[18] * *filter++;
  *sum_0 += input_0[19] * *filter;
  *sum_1 += input_1[19] * *filter;
  *sum_2 += input_2[19] * *filter;
  *sum_3 += input_3[19] * *filter++;

  *sum_0 += input_0[20] * *filter;
  *sum_1 += input_1[20] * *filter;
  *sum_2 += input_2[20] * *filter;
  *sum_3 += input_3[20] * *filter++;
  *sum_0 += input_0[21] * *filter;
  *sum_1 += input_1[21] * *filter;
  *sum_2 += input_2[21] * *filter;
  *sum_3 += input_3[21] * *filter++;
  *sum_0 += input_0[22] * *filter;
  *sum_1 += input_1[22] * *filter;
  *sum_2 += input_2[22] * *filter;
  *sum_3 += input_3[22] * *filter++;
  *sum_0 += input_0[23] * *filter;
  *sum_1 += input_1[23] * *filter;
  *sum_2 += input_2[23] * *filter;
  *sum_3 += input_3[23] * *filter++;
  *sum_0 += input_0[24] * *filter;
  *sum_1 += input_1[24] * *filter;
  *sum_2 += input_2[24] * *filter;
  *sum_3 += input_3[24] * *filter++;
}

static inline void group_mac_kernel5_2row_32col_fp_uniweight_IOHW(float* sum_0, float* sum_1, const float* input_0, const float* input_1, 
                      const float* filter, const int output_depth_per_group) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[16] * *filter;
  *sum_1 += input_1[16] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[17] * *filter;
  *sum_1 += input_1[17] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[18] * *filter;
  *sum_1 += input_1[18] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[19] * *filter;
  *sum_1 += input_1[19] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[20] * *filter;
  *sum_1 += input_1[20] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[21] * *filter;
  *sum_1 += input_1[21] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[22] * *filter;
  *sum_1 += input_1[22] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[23] * *filter;
  *sum_1 += input_1[23] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[24] * *filter;
  *sum_1 += input_1[24] * *filter;
  filter += output_depth_per_group;
}

static inline void group_mac_kernel5_2row_32col_fp_uniweight(float* sum_0, float* sum_1, const float* input_0, const float* input_1, 
                      const float* filter) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter++;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter++;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter++;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter++;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter++;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter++;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter++;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter++;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter++;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter++;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter++;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter++;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter++;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter++;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter++;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter++;
  *sum_0 += input_0[16] * *filter;
  *sum_1 += input_1[16] * *filter++;
  *sum_0 += input_0[17] * *filter;
  *sum_1 += input_1[17] * *filter++;
  *sum_0 += input_0[18] * *filter;
  *sum_1 += input_1[18] * *filter++;
  *sum_0 += input_0[19] * *filter;
  *sum_1 += input_1[19] * *filter++;

  *sum_0 += input_0[20] * *filter;
  *sum_1 += input_1[20] * *filter++;
  *sum_0 += input_0[21] * *filter;
  *sum_1 += input_1[21] * *filter++;
  *sum_0 += input_0[22] * *filter;
  *sum_1 += input_1[22] * *filter++;
  *sum_0 += input_0[23] * *filter;
  *sum_1 += input_1[23] * *filter++;
  *sum_0 += input_0[24] * *filter;
  *sum_1 += input_1[24] * *filter++;
}
/* END: For 5x5 kernel size, stride1_pad0_in5x5_out1x1_uniweight */

/* START: For 4x4 kernel size, stride1_pad0_in4x4_out1x1_uniweight */
static inline void group_mac_kernel4_4row_16col_fp_uniweight_IOHW(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
                      const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter, const int output_depth_per_group) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  *sum_2 += input_2[0] * *filter;
  *sum_3 += input_3[0] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  *sum_2 += input_2[1] * *filter;
  *sum_3 += input_3[1] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  *sum_2 += input_2[2] * *filter;
  *sum_3 += input_3[2] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  *sum_2 += input_2[3] * *filter;
  *sum_3 += input_3[3] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  *sum_2 += input_2[4] * *filter;
  *sum_3 += input_3[4] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  *sum_2 += input_2[5] * *filter;
  *sum_3 += input_3[5] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  *sum_2 += input_2[6] * *filter;
  *sum_3 += input_3[6] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  *sum_2 += input_2[7] * *filter;
  *sum_3 += input_3[7] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  *sum_2 += input_2[8] * *filter;
  *sum_3 += input_3[8] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter;
  *sum_2 += input_2[9] * *filter;
  *sum_3 += input_3[9] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter;
  *sum_2 += input_2[10] * *filter;
  *sum_3 += input_3[10] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter;
  *sum_2 += input_2[11] * *filter;
  *sum_3 += input_3[11] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter;
  *sum_2 += input_2[12] * *filter;
  *sum_3 += input_3[12] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter;
  *sum_2 += input_2[13] * *filter;
  *sum_3 += input_3[13] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter;
  *sum_2 += input_2[14] * *filter;
  *sum_3 += input_3[14] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter;
  *sum_2 += input_2[15] * *filter;
  *sum_3 += input_3[15] * *filter;
  filter += output_depth_per_group;
}

static inline void group_mac_kernel4_4row_fp_uniweight_reuse_output_input(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
           const float* input_0, const float* input_1, const float* input_2, const float* input_3,
           const float* filter) {
    float tmp;
    tmp = 0;
    tmp += input_0[0] * filter[0];
    tmp += input_0[1] * filter[1];
    tmp += input_0[2] * filter[2];
    tmp += input_0[3] * filter[3];
    tmp += input_0[4] * filter[4];
    tmp += input_0[5] * filter[5];
    tmp += input_0[6] * filter[6];
    tmp += input_0[7] * filter[7];
    tmp += input_0[8] * filter[8];
    tmp += input_0[9] * filter[9];
    tmp += input_0[10] * filter[10];
    tmp += input_0[11] * filter[11];
    tmp += input_0[12] * filter[12];
    tmp += input_0[13] * filter[13];
    tmp += input_0[14] * filter[14];
    tmp += input_0[15] * filter[15];
    *sum_0 += tmp;
    tmp = 0;
    tmp += input_1[0] * filter[0];
    tmp += input_1[1] * filter[1];
    tmp += input_1[2] * filter[2];
    tmp += input_1[3] * filter[3];
    tmp += input_1[4] * filter[4];
    tmp += input_1[5] * filter[5];
    tmp += input_1[6] * filter[6];
    tmp += input_1[7] * filter[7];
    tmp += input_1[8] * filter[8];
    tmp += input_1[9] * filter[9];
    tmp += input_1[10] * filter[10];
    tmp += input_1[11] * filter[11];
    tmp += input_1[12] * filter[12];
    tmp += input_1[13] * filter[13];
    tmp += input_1[14] * filter[14];
    tmp += input_1[15] * filter[15];
    *sum_1 += tmp;
    tmp = 0;
    tmp += input_2[0] * filter[0];
    tmp += input_2[1] * filter[1];
    tmp += input_2[2] * filter[2];
    tmp += input_2[3] * filter[3];
    tmp += input_2[4] * filter[4];
    tmp += input_2[5] * filter[5];
    tmp += input_2[6] * filter[6];
    tmp += input_2[7] * filter[7];
    tmp += input_2[8] * filter[8];
    tmp += input_2[9] * filter[9];
    tmp += input_2[10] * filter[10];
    tmp += input_2[11] * filter[11];
    tmp += input_2[12] * filter[12];
    tmp += input_2[13] * filter[13];
    tmp += input_2[14] * filter[14];
    tmp += input_2[15] * filter[15];
    *sum_2 += tmp;
    tmp = 0;
    tmp += input_3[0] * filter[0];
    tmp += input_3[1] * filter[1];
    tmp += input_3[2] * filter[2];
    tmp += input_3[3] * filter[3];
    tmp += input_3[4] * filter[4];
    tmp += input_3[5] * filter[5];
    tmp += input_3[6] * filter[6];
    tmp += input_3[7] * filter[7];
    tmp += input_3[8] * filter[8];
    tmp += input_3[9] * filter[9];
    tmp += input_3[10] * filter[10];
    tmp += input_3[11] * filter[11];
    tmp += input_3[12] * filter[12];
    tmp += input_3[13] * filter[13];
    tmp += input_3[14] * filter[14];
    tmp += input_3[15] * filter[15];
    *sum_3 += tmp;
}
// a better version

static inline void group_mac_kernel4_4row_16col_fp_uniweight(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
                      const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  *sum_2 += input_2[0] * *filter;
  *sum_3 += input_3[0] * *filter++;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  *sum_2 += input_2[1] * *filter;
  *sum_3 += input_3[1] * *filter++;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  *sum_2 += input_2[2] * *filter;
  *sum_3 += input_3[2] * *filter++;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  *sum_2 += input_2[3] * *filter;
  *sum_3 += input_3[3] * *filter++;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  *sum_2 += input_2[4] * *filter;
  *sum_3 += input_3[4] * *filter++;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  *sum_2 += input_2[5] * *filter;
  *sum_3 += input_3[5] * *filter++;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  *sum_2 += input_2[6] * *filter;
  *sum_3 += input_3[6] * *filter++;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  *sum_2 += input_2[7] * *filter;
  *sum_3 += input_3[7] * *filter++;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  *sum_2 += input_2[8] * *filter;
  *sum_3 += input_3[8] * *filter++;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter;
  *sum_2 += input_2[9] * *filter;
  *sum_3 += input_3[9] * *filter++;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter;
  *sum_2 += input_2[10] * *filter;
  *sum_3 += input_3[10] * *filter++;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter;
  *sum_2 += input_2[11] * *filter;
  *sum_3 += input_3[11] * *filter++;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter;
  *sum_2 += input_2[12] * *filter;
  *sum_3 += input_3[12] * *filter++;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter;
  *sum_2 += input_2[13] * *filter;
  *sum_3 += input_3[13] * *filter++;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter;
  *sum_2 += input_2[14] * *filter;
  *sum_3 += input_3[14] * *filter++;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter;
  *sum_2 += input_2[15] * *filter;
  *sum_3 += input_3[15] * *filter++;
}

static inline void group_mac_kernel4_3row_16col_fp_uniweight_IOHW(float* sum_0, float* sum_1, float* sum_2,
                      const float* input_0, const float* input_1, const float* input_2, 
                      const float* filter, const int output_depth_per_group) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  *sum_2 += input_2[0] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  *sum_2 += input_2[1] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  *sum_2 += input_2[2] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  *sum_2 += input_2[3] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  *sum_2 += input_2[4] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  *sum_2 += input_2[5] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  *sum_2 += input_2[6] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  *sum_2 += input_2[7] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  *sum_2 += input_2[8] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter;
  *sum_2 += input_2[9] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter;
  *sum_2 += input_2[10] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter;
  *sum_2 += input_2[11] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter;
  *sum_2 += input_2[12] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter;
  *sum_2 += input_2[13] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter;
  *sum_2 += input_2[14] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter;
  *sum_2 += input_2[15] * *filter;
  filter += output_depth_per_group;
}

static inline void group_mac_kernel4_2row_32col_fp_uniweight_IOHW(float* sum_0, float* sum_1, const float* input_0, const float* input_1, 
                      const float* filter, const int output_depth_per_group) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter;
  filter += output_depth_per_group;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter;
  filter += output_depth_per_group;
}

static inline void group_mac_kernel4_2row_32col_fp_uniweight(float* sum_0, float* sum_1, const float* input_0, const float* input_1, 
                      const float* filter) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter++;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter++;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter++;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter++;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter++;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter++;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter++;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter++;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter++;
  *sum_0 += input_0[9] * *filter;
  *sum_1 += input_1[9] * *filter++;

  *sum_0 += input_0[10] * *filter;
  *sum_1 += input_1[10] * *filter++;
  *sum_0 += input_0[11] * *filter;
  *sum_1 += input_1[11] * *filter++;
  *sum_0 += input_0[12] * *filter;
  *sum_1 += input_1[12] * *filter++;
  *sum_0 += input_0[13] * *filter;
  *sum_1 += input_1[13] * *filter++;
  *sum_0 += input_0[14] * *filter;
  *sum_1 += input_1[14] * *filter++;
  *sum_0 += input_0[15] * *filter;
  *sum_1 += input_1[15] * *filter++;
}
/* END: For 4x4 kernel size, stride1_pad0_in4x4_out1x1_uniweight */


/* START: For 3x3 kernel size, stride1_pad0_in3x3_out1x1_uniweight */
static inline void group_mac_kernel3_4row_16col_fp_uniweight_IOHW(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
                      const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter, const int output_depth_per_group) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  *sum_2 += input_2[0] * *filter;
  *sum_3 += input_3[0] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  *sum_2 += input_2[1] * *filter;
  *sum_3 += input_3[1] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  *sum_2 += input_2[2] * *filter;
  *sum_3 += input_3[2] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  *sum_2 += input_2[3] * *filter;
  *sum_3 += input_3[3] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  *sum_2 += input_2[4] * *filter;
  *sum_3 += input_3[4] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  *sum_2 += input_2[5] * *filter;
  *sum_3 += input_3[5] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  *sum_2 += input_2[6] * *filter;
  *sum_3 += input_3[6] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  *sum_2 += input_2[7] * *filter;
  *sum_3 += input_3[7] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  *sum_2 += input_2[8] * *filter;
  *sum_3 += input_3[8] * *filter;
  filter += output_depth_per_group;
}

static inline void group_mac_kernel3_4row_16col_fp_uniweight(float* sum_0, float* sum_1, float* sum_2, float* sum_3,
                      const float* input_0, const float* input_1, const float* input_2, const float* input_3, 
                      const float* filter) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  *sum_2 += input_2[0] * *filter;
  *sum_3 += input_3[0] * *filter++;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  *sum_2 += input_2[1] * *filter;
  *sum_3 += input_3[1] * *filter++;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  *sum_2 += input_2[2] * *filter;
  *sum_3 += input_3[2] * *filter++;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  *sum_2 += input_2[3] * *filter;
  *sum_3 += input_3[3] * *filter++;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  *sum_2 += input_2[4] * *filter;
  *sum_3 += input_3[4] * *filter++;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  *sum_2 += input_2[5] * *filter;
  *sum_3 += input_3[5] * *filter++;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  *sum_2 += input_2[6] * *filter;
  *sum_3 += input_3[6] * *filter++;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  *sum_2 += input_2[7] * *filter;
  *sum_3 += input_3[7] * *filter++;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  *sum_2 += input_2[8] * *filter;
  *sum_3 += input_3[8] * *filter++;
}

static inline void group_mac_kernel3_2row_32col_fp_uniweight_IOHW(float* sum_0, float* sum_1, const float* input_0, const float* input_1, 
                      const float* filter, const int output_depth_per_group) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter;
  filter += output_depth_per_group;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter;
  filter += output_depth_per_group;
}

static inline void group_mac_kernel3_2row_32col_fp_uniweight(float* sum_0, float* sum_1, const float* input_0, const float* input_1, 
                      const float* filter) {
  *sum_0 += input_0[0] * *filter;
  *sum_1 += input_1[0] * *filter++;
  *sum_0 += input_0[1] * *filter;
  *sum_1 += input_1[1] * *filter++;
  *sum_0 += input_0[2] * *filter;
  *sum_1 += input_1[2] * *filter++;
  *sum_0 += input_0[3] * *filter;
  *sum_1 += input_1[3] * *filter++;
  *sum_0 += input_0[4] * *filter;
  *sum_1 += input_1[4] * *filter++;
  *sum_0 += input_0[5] * *filter;
  *sum_1 += input_1[5] * *filter++;
  *sum_0 += input_0[6] * *filter;
  *sum_1 += input_1[6] * *filter++;
  *sum_0 += input_0[7] * *filter;
  *sum_1 += input_1[7] * *filter++;
  *sum_0 += input_0[8] * *filter;
  *sum_1 += input_1[8] * *filter++;
}
/* END: For 3x3 kernel size, stride1_pad0_in3x3_out1x1_uniweight */

/* END: MAC Functions for Group Conv */



/* START: MAC Functions for Transpose Conv */

/* START: For 7x7 kernel size, whatever stride */
static inline void transpose_mac_7row_7col_1input_2filter_xstride_fp(float* out, float* out2, float* out3, float* out4, float* out5, float* out6, float* out7,
                            const int output_depth, const float* input_0, const float* filter_0, const float* filter_1) {
  *out++ += *input_0 * *filter_0++; // output[0][0][0]
  *out += *input_0 * *filter_1++; // output[1][0][0]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][1]
  *out += *input_0 * *filter_1++; // output[1][0][1]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][2]
  *out += *input_0 * *filter_1++; // output[1][0][2]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][3]
  *out += *input_0 * *filter_1++; // output[1][0][3]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][4]
  *out += *input_0 * *filter_1++; // output[1][0][4]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][5]
  *out += *input_0 * *filter_1++; // output[1][0][5]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][6]
  *out += *input_0 * *filter_1++; // output[1][0][6]

  *out2++ += *input_0 * *filter_0++; // output[0][1][0]
  *out2 += *input_0 * *filter_1++; // output[1][1][0]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][1]
  *out2 += *input_0 * *filter_1++; // output[1][1][1]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][2]
  *out2 += *input_0 * *filter_1++; // output[1][1][2]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][3]
  *out2 += *input_0 * *filter_1++; // output[1][1][3]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][4]
  *out2 += *input_0 * *filter_1++; // output[1][1][4]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][5]
  *out2 += *input_0 * *filter_1++; // output[1][1][5]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][6]
  *out2 += *input_0 * *filter_1++; // output[1][1][6]

  *out3++ += *input_0 * *filter_0++; // output[0][2][0]
  *out3 += *input_0 * *filter_1++; // output[1][2][0]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][1]
  *out3 += *input_0 * *filter_1++; // output[1][2][1]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][2]
  *out3 += *input_0 * *filter_1++; // output[1][2][2]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][3]
  *out3 += *input_0 * *filter_1++; // output[1][2][3]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][4]
  *out3 += *input_0 * *filter_1++; // output[1][2][4]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][5]
  *out3 += *input_0 * *filter_1++; // output[1][2][5]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][6]
  *out3 += *input_0 * *filter_1++; // output[1][2][6]

  *out4++ += *input_0 * *filter_0++; // output[0][3][0]
  *out4 += *input_0 * *filter_1++; // output[1][3][0]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][1]
  *out4 += *input_0 * *filter_1++; // output[1][3][1]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][2]
  *out4 += *input_0 * *filter_1++; // output[1][3][2]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][3]
  *out4 += *input_0 * *filter_1++; // output[1][3][3]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][4]
  *out4 += *input_0 * *filter_1++; // output[1][3][4]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][5]
  *out4 += *input_0 * *filter_1++; // output[1][3][5]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][6]
  *out4 += *input_0 * *filter_1++; // output[1][3][6]

  *out5++ += *input_0 * *filter_0++; // output[0][4][0]
  *out5 += *input_0 * *filter_1++; // output[1][4][0]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][1]
  *out5 += *input_0 * *filter_1++; // output[1][4][1]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][2]
  *out5 += *input_0 * *filter_1++; // output[1][4][2]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][3]
  *out5 += *input_0 * *filter_1++; // output[1][4][3]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][4]
  *out5 += *input_0 * *filter_1++; // output[1][4][4]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][5]
  *out5 += *input_0 * *filter_1++; // output[1][4][5]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][6]
  *out5 += *input_0 * *filter_1++; // output[1][4][6]

  *out6++ += *input_0 * *filter_0++; // output[0][5][0]
  *out6 += *input_0 * *filter_1++; // output[1][5][0]
  out6 += output_depth - 1;
  *out6++ += *input_0 * *filter_0++; // output[0][5][1]
  *out6 += *input_0 * *filter_1++; // output[1][5][1]
  out6 += output_depth - 1;
  *out6++ += *input_0 * *filter_0++; // output[0][5][2]
  *out6 += *input_0 * *filter_1++; // output[1][5][2]
  out6 += output_depth - 1;
  *out6++ += *input_0 * *filter_0++; // output[0][5][3]
  *out6 += *input_0 * *filter_1++; // output[1][5][3]
  out6 += output_depth - 1;
  *out6++ += *input_0 * *filter_0++; // output[0][5][4]
  *out6 += *input_0 * *filter_1++; // output[1][5][4]
  out6 += output_depth - 1;
  *out6++ += *input_0 * *filter_0++; // output[0][5][5]
  *out6 += *input_0 * *filter_1++; // output[1][5][5]
  out6 += output_depth - 1;
  *out6++ += *input_0 * *filter_0++; // output[0][5][6]
  *out6 += *input_0 * *filter_1++; // output[1][5][6]

  *out7++ += *input_0 * *filter_0++; // output[0][6][0]
  *out7 += *input_0 * *filter_1++; // output[1][6][0]
  out7 += output_depth - 1;
  *out7++ += *input_0 * *filter_0++; // output[0][6][1]
  *out7 += *input_0 * *filter_1++; // output[1][6][1]
  out7 += output_depth - 1;
  *out7++ += *input_0 * *filter_0++; // output[0][6][2]
  *out7 += *input_0 * *filter_1++; // output[1][6][2]
  out7 += output_depth - 1;
  *out7++ += *input_0 * *filter_0++; // output[0][6][3]
  *out7 += *input_0 * *filter_1++; // output[1][6][3]
  out7 += output_depth - 1;
  *out7++ += *input_0 * *filter_0++; // output[0][6][4]
  *out7 += *input_0 * *filter_1++; // output[1][6][4]
  out7 += output_depth - 1;
  *out7++ += *input_0 * *filter_0++; // output[0][6][5]
  *out7 += *input_0 * *filter_1++; // output[1][6][5]
  out7 += output_depth - 1;
  *out7++ += *input_0 * *filter_0++; // output[0][6][6]
  *out7 += *input_0 * *filter_1++; // output[1][6][6]
}

static inline void transpose_mac_7row_7col_1input_1filter_xstride_fp(float* out, float* out2, float* out3, float* out4, float* out5, float* out6, float* out7,
                            const int output_depth, const float* input_0, const float* filter_0) {
  *out += *input_0 * *filter_0++; // output[0][0][0]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][1]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][2]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][3]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][4]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][5]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][6]

  *out2 += *input_0 * *filter_0++; // output[0][1][0]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][1]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][2]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][3]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][4]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][5]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][6]

  *out3 += *input_0 * *filter_0++; // output[0][2][0]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][1]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][2]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][3]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][4]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][5]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][6]

  *out4 += *input_0 * *filter_0++; // output[0][3][0]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][1]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][2]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][3]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][4]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][5]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][6]

  *out5 += *input_0 * *filter_0++; // output[0][4][0]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][1]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][2]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][3]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][4]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][5]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][6]

  *out6 += *input_0 * *filter_0++; // output[0][5][0]
  out6 += output_depth;
  *out6 += *input_0 * *filter_0++; // output[0][5][1]
  out6 += output_depth;
  *out6 += *input_0 * *filter_0++; // output[0][5][2]
  out6 += output_depth;
  *out6 += *input_0 * *filter_0++; // output[0][5][3]
  out6 += output_depth;
  *out6 += *input_0 * *filter_0++; // output[0][5][4]
  out6 += output_depth;
  *out6 += *input_0 * *filter_0++; // output[0][5][5]
  out6 += output_depth;
  *out6 += *input_0 * *filter_0++; // output[0][5][6]

  *out7 += *input_0 * *filter_0++; // output[0][6][0]
  out7 += output_depth;
  *out7 += *input_0 * *filter_0++; // output[0][6][1]
  out7 += output_depth;
  *out7 += *input_0 * *filter_0++; // output[0][6][2]
  out7 += output_depth;
  *out7 += *input_0 * *filter_0++; // output[0][6][3]
  out7 += output_depth;
  *out7 += *input_0 * *filter_0++; // output[0][6][4]
  out7 += output_depth;
  *out7 += *input_0 * *filter_0++; // output[0][6][5]
  out7 += output_depth;
  *out7 += *input_0 * *filter_0++; // output[0][6][6]
}
/* END: For 7x7 kernel size, whatever stride */

/* START: For 7x7 kernel size, stride 1 */
static inline void transpose_mac_7row_7col_2input_2filter_1stride_fp(float* out, float* out2, float* out3, float* out4, float* out5, float* out6, float* out7,
                            const int output_depth, const float* input_0, const float* input_1, const float* filter_0, const float* filter_1) {
  *out++ += *input_0 * *filter_0; // output[0][0][0]
  *out += *input_0 * *filter_1; // output[1][0][0]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][1]
  *out++ += *input_0 * *filter_0; // output[0][0][1]
  *out += *input_1 * *filter_1++; // output[1][0][1]
  *out += *input_0 * *filter_1; // output[1][0][1]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][2]
  *out++ += *input_0 * *filter_0; // output[0][0][2]
  *out += *input_1 * *filter_1++; // output[1][0][2]
  *out += *input_0 * *filter_1; // output[1][0][2]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][3]
  *out++ += *input_0 * *filter_0; // output[0][0][3]
  *out += *input_1 * *filter_1++; // output[1][0][3]
  *out += *input_0 * *filter_1; // output[1][0][3]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][4]
  *out++ += *input_0 * *filter_0; // output[0][0][4]
  *out += *input_1 * *filter_1++; // output[1][0][4]
  *out += *input_0 * *filter_1; // output[1][0][4]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][5]
  *out++ += *input_0 * *filter_0; // output[0][0][5]
  *out += *input_1 * *filter_1++; // output[1][0][5]
  *out += *input_0 * *filter_1; // output[1][0][5]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][6]
  *out++ += *input_0 * *filter_0; // output[0][0][6]
  *out += *input_1 * *filter_1++; // output[1][0][6]
  *out += *input_0 * *filter_1; // output[1][0][6]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0++;  // output[0][0][7]
  *out += *input_1 * *filter_1++;  // output[1][0][7]

  *out2++ += *input_0 * *filter_0; // output[0][1][0]
  *out2 += *input_0 * *filter_1; // output[1][1][0]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][1]
  *out2++ += *input_0 * *filter_0; // output[0][1][1]
  *out2 += *input_1 * *filter_1++; // output[1][1][1]
  *out2 += *input_0 * *filter_1; // output[1][1][1]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][2]
  *out2++ += *input_0 * *filter_0; // output[0][1][2]
  *out2 += *input_1 * *filter_1++; // output[1][1][2]
  *out2 += *input_0 * *filter_1; // output[1][1][2]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][3]
  *out2++ += *input_0 * *filter_0; // output[0][1][3]
  *out2 += *input_1 * *filter_1++; // output[1][1][3]
  *out2 += *input_0 * *filter_1; // output[1][1][3]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][4]
  *out2++ += *input_0 * *filter_0; // output[0][1][4]
  *out2 += *input_1 * *filter_1++; // output[1][1][4]
  *out2 += *input_0 * *filter_1; // output[1][1][4]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][5]
  *out2++ += *input_0 * *filter_0; // output[0][1][5]
  *out2 += *input_1 * *filter_1++; // output[1][1][5]
  *out2 += *input_0 * *filter_1; // output[1][1][5]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][6]
  *out2++ += *input_0 * *filter_0; // output[0][1][6]
  *out2 += *input_1 * *filter_1++; // output[1][1][6]
  *out2 += *input_0 * *filter_1; // output[1][1][6]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0++;  // output[0][1][7]
  *out2 += *input_1 * *filter_1++;  // output[1][1][7]

  *out3++ += *input_0 * *filter_0; // output[0][2][0]
  *out3 += *input_0 * *filter_1; // output[1][2][0]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][1]
  *out3++ += *input_0 * *filter_0; // output[0][2][1]
  *out3 += *input_1 * *filter_1++; // output[1][2][1]
  *out3 += *input_0 * *filter_1; // output[1][2][1]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][2]
  *out3++ += *input_0 * *filter_0; // output[0][2][2]
  *out3 += *input_1 * *filter_1++; // output[1][2][2]
  *out3 += *input_0 * *filter_1; // output[1][2][2]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][3]
  *out3++ += *input_0 * *filter_0; // output[0][2][3]
  *out3 += *input_1 * *filter_1++; // output[1][2][3]
  *out3 += *input_0 * *filter_1; // output[1][2][3]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][4]
  *out3++ += *input_0 * *filter_0; // output[0][2][4]
  *out3 += *input_1 * *filter_1++; // output[1][2][4]
  *out3 += *input_0 * *filter_1; // output[1][2][4]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][5]
  *out3++ += *input_0 * *filter_0; // output[0][2][5]
  *out3 += *input_1 * *filter_1++; // output[1][2][5]
  *out3 += *input_0 * *filter_1; // output[1][2][5]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][6]
  *out3++ += *input_0 * *filter_0; // output[0][2][6]
  *out3 += *input_1 * *filter_1++; // output[1][2][6]
  *out3 += *input_0 * *filter_1; // output[1][2][6]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0++;  // output[0][2][7]
  *out3 += *input_1 * *filter_1++;  // output[1][2][7]

  *out4++ += *input_0 * *filter_0; // output[0][3][0]
  *out4 += *input_0 * *filter_1; // output[1][3][0]
  out4 += output_depth - 1;
  *out4 += *input_1 * *filter_0++; // output[0][3][1]
  *out4++ += *input_0 * *filter_0; // output[0][3][1]
  *out4 += *input_1 * *filter_1++; // output[1][3][1]
  *out4 += *input_0 * *filter_1; // output[1][3][1]
  out4 += output_depth - 1;
  *out4 += *input_1 * *filter_0++; // output[0][3][2]
  *out4++ += *input_0 * *filter_0; // output[0][3][2]
  *out4 += *input_1 * *filter_1++; // output[1][3][2]
  *out4 += *input_0 * *filter_1; // output[1][3][2]
  out4 += output_depth - 1;
  *out4 += *input_1 * *filter_0++; // output[0][3][3]
  *out4++ += *input_0 * *filter_0; // output[0][3][3]
  *out4 += *input_1 * *filter_1++; // output[1][3][3]
  *out4 += *input_0 * *filter_1; // output[1][3][3]
  out4 += output_depth - 1;
  *out4 += *input_1 * *filter_0++; // output[0][3][4]
  *out4++ += *input_0 * *filter_0; // output[0][3][4]
  *out4 += *input_1 * *filter_1++; // output[1][3][4]
  *out4 += *input_0 * *filter_1; // output[1][3][4]
  out4 += output_depth - 1;
  *out4 += *input_1 * *filter_0++; // output[0][3][5]
  *out4++ += *input_0 * *filter_0; // output[0][3][5]
  *out4 += *input_1 * *filter_1++; // output[1][3][5]
  *out4 += *input_0 * *filter_1; // output[1][3][5]
  out4 += output_depth - 1;
  *out4 += *input_1 * *filter_0++; // output[0][3][6]
  *out4++ += *input_0 * *filter_0; // output[0][3][6]
  *out4 += *input_1 * *filter_1++; // output[1][3][6]
  *out4 += *input_0 * *filter_1; // output[1][3][6]
  out4 += output_depth - 1;
  *out4++ += *input_1 * *filter_0++;  // output[0][3][7]
  *out4 += *input_1 * *filter_1++;  // output[1][3][7]

  *out5++ += *input_0 * *filter_0; // output[0][4][0]
  *out5 += *input_0 * *filter_1; // output[1][4][0]
  out5 += output_depth - 1;
  *out5 += *input_1 * *filter_0++; // output[0][4][1]
  *out5++ += *input_0 * *filter_0; // output[0][4][1]
  *out5 += *input_1 * *filter_1++; // output[1][4][1]
  *out5 += *input_0 * *filter_1; // output[1][4][1]
  out5 += output_depth - 1;
  *out5 += *input_1 * *filter_0++; // output[0][4][2]
  *out5++ += *input_0 * *filter_0; // output[0][4][2]
  *out5 += *input_1 * *filter_1++; // output[1][4][2]
  *out5 += *input_0 * *filter_1; // output[1][4][2]
  out5 += output_depth - 1;
  *out5 += *input_1 * *filter_0++; // output[0][4][3]
  *out5++ += *input_0 * *filter_0; // output[0][4][3]
  *out5 += *input_1 * *filter_1++; // output[1][4][3]
  *out5 += *input_0 * *filter_1; // output[1][4][3]
  out5 += output_depth - 1;
  *out5 += *input_1 * *filter_0++; // output[0][4][4]
  *out5++ += *input_0 * *filter_0; // output[0][4][4]
  *out5 += *input_1 * *filter_1++; // output[1][4][4]
  *out5 += *input_0 * *filter_1; // output[1][4][4]
  out5 += output_depth - 1;
  *out5 += *input_1 * *filter_0++; // output[0][4][5]
  *out5++ += *input_0 * *filter_0; // output[0][4][5]
  *out5 += *input_1 * *filter_1++; // output[1][4][5]
  *out5 += *input_0 * *filter_1; // output[1][4][5]
  out5 += output_depth - 1;
  *out5 += *input_1 * *filter_0++; // output[0][4][6]
  *out5++ += *input_0 * *filter_0; // output[0][4][6]
  *out5 += *input_1 * *filter_1++; // output[1][4][6]
  *out5 += *input_0 * *filter_1; // output[1][4][6]
  out5 += output_depth - 1;
  *out5++ += *input_1 * *filter_0++;  // output[0][4][7]
  *out5 += *input_1 * *filter_1++;  // output[1][4][7]

  *out6++ += *input_0 * *filter_0; // output[0][5][0]
  *out6 += *input_0 * *filter_1; // output[1][5][0]
  out6 += output_depth - 1;
  *out6 += *input_1 * *filter_0++; // output[0][5][1]
  *out6++ += *input_0 * *filter_0; // output[0][5][1]
  *out6 += *input_1 * *filter_1++; // output[1][5][1]
  *out6 += *input_0 * *filter_1; // output[1][5][1]
  out6 += output_depth - 1;
  *out6 += *input_1 * *filter_0++; // output[0][5][2]
  *out6++ += *input_0 * *filter_0; // output[0][5][2]
  *out6 += *input_1 * *filter_1++; // output[1][5][2]
  *out6 += *input_0 * *filter_1; // output[1][5][2]
  out6 += output_depth - 1;
  *out6 += *input_1 * *filter_0++; // output[0][5][3]
  *out6++ += *input_0 * *filter_0; // output[0][5][3]
  *out6 += *input_1 * *filter_1++; // output[1][5][3]
  *out6 += *input_0 * *filter_1; // output[1][5][3]
  out6 += output_depth - 1;
  *out6 += *input_1 * *filter_0++; // output[0][5][4]
  *out6++ += *input_0 * *filter_0; // output[0][5][4]
  *out6 += *input_1 * *filter_1++; // output[1][5][4]
  *out6 += *input_0 * *filter_1; // output[1][5][4]
  out6 += output_depth - 1;
  *out6 += *input_1 * *filter_0++; // output[0][5][5]
  *out6++ += *input_0 * *filter_0; // output[0][5][5]
  *out6 += *input_1 * *filter_1++; // output[1][5][5]
  *out6 += *input_0 * *filter_1; // output[1][5][5]
  out6 += output_depth - 1;
  *out6 += *input_1 * *filter_0++; // output[0][5][6]
  *out6++ += *input_0 * *filter_0; // output[0][5][6]
  *out6 += *input_1 * *filter_1++; // output[1][5][6]
  *out6 += *input_0 * *filter_1; // output[1][5][6]
  out6 += output_depth - 1;
  *out6++ += *input_1 * *filter_0++;  // output[0][5][7]
  *out6 += *input_1 * *filter_1++;  // output[1][5][7]

  *out7++ += *input_0 * *filter_0; // output[0][6][0]
  *out7 += *input_0 * *filter_1; // output[1][6][0]
  out7 += output_depth - 1;
  *out7 += *input_1 * *filter_0++; // output[0][6][1]
  *out7++ += *input_0 * *filter_0; // output[0][6][1]
  *out7 += *input_1 * *filter_1++; // output[1][6][1]
  *out7 += *input_0 * *filter_1; // output[1][6][1]
  out7 += output_depth - 1;
  *out7 += *input_1 * *filter_0++; // output[0][6][2]
  *out7++ += *input_0 * *filter_0; // output[0][6][2]
  *out7 += *input_1 * *filter_1++; // output[1][6][2]
  *out7 += *input_0 * *filter_1; // output[1][6][2]
  out7 += output_depth - 1;
  *out7 += *input_1 * *filter_0++; // output[0][6][3]
  *out7++ += *input_0 * *filter_0; // output[0][6][3]
  *out7 += *input_1 * *filter_1++; // output[1][6][3]
  *out7 += *input_0 * *filter_1; // output[1][6][3]
  out7 += output_depth - 1;
  *out7 += *input_1 * *filter_0++; // output[0][6][4]
  *out7++ += *input_0 * *filter_0; // output[0][6][4]
  *out7 += *input_1 * *filter_1++; // output[1][6][4]
  *out7 += *input_0 * *filter_1; // output[1][6][4]
  out7 += output_depth - 1;
  *out7 += *input_1 * *filter_0++; // output[0][6][5]
  *out7++ += *input_0 * *filter_0; // output[0][6][5]
  *out7 += *input_1 * *filter_1++; // output[1][6][5]
  *out7 += *input_0 * *filter_1; // output[1][6][5]
  out7 += output_depth - 1;
  *out7 += *input_1 * *filter_0++; // output[0][6][6]
  *out7++ += *input_0 * *filter_0; // output[0][6][6]
  *out7 += *input_1 * *filter_1++; // output[1][6][6]
  *out7 += *input_0 * *filter_1; // output[1][6][6]
  out7 += output_depth - 1;
  *out7++ += *input_1 * *filter_0++;  // output[0][6][7]
  *out7 += *input_1 * *filter_1++;  // output[1][6][7]
}

static inline void transpose_mac_7row_7col_2input_1filter_1stride_fp(float* out, float* out2, float* out3, float* out4, float* out5, float* out6, float* out7,
                            const int output_depth, const float* input_0, const float* input_1, const float* filter_0) {
  *out += *input_0 * *filter_0; // output[0][0][0]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][1]
  *out += *input_0 * *filter_0; // output[0][0][1]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][2]
  *out += *input_0 * *filter_0; // output[0][0][2]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][3]
  *out += *input_0 * *filter_0; // output[0][0][3]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][4]
  *out += *input_0 * *filter_0; // output[0][0][4]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][5]
  *out += *input_0 * *filter_0; // output[0][0][5]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][6]
  *out += *input_0 * *filter_0; // output[0][0][6]
  out += output_depth;
  *out += *input_1 * *filter_0++;  // output[0][0][7]

  *out2 += *input_0 * *filter_0; // output[0][1][0]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][1]
  *out2 += *input_0 * *filter_0; // output[0][1][1]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][2]
  *out2 += *input_0 * *filter_0; // output[0][1][2]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][3]
  *out2 += *input_0 * *filter_0; // output[0][1][3]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][4]
  *out2 += *input_0 * *filter_0; // output[0][1][4]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][5]
  *out2 += *input_0 * *filter_0; // output[0][1][5]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][6]
  *out2 += *input_0 * *filter_0; // output[0][1][6]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++;  // output[0][1][7]

  *out3 += *input_0 * *filter_0; // output[0][2][0]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][1]
  *out3 += *input_0 * *filter_0; // output[0][2][1]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][2]
  *out3 += *input_0 * *filter_0; // output[0][2][2]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][3]
  *out3 += *input_0 * *filter_0; // output[0][2][3]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][4]
  *out3 += *input_0 * *filter_0; // output[0][2][4]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][5]
  *out3 += *input_0 * *filter_0; // output[0][2][5]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][6]
  *out3 += *input_0 * *filter_0; // output[0][2][6]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++;  // output[0][2][7]

  *out4 += *input_0 * *filter_0; // output[0][3][0]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][1]
  *out4 += *input_0 * *filter_0; // output[0][3][1]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][2]
  *out4 += *input_0 * *filter_0; // output[0][3][2]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][3]
  *out4 += *input_0 * *filter_0; // output[0][3][3]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][4]
  *out4 += *input_0 * *filter_0; // output[0][3][4]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][5]
  *out4 += *input_0 * *filter_0; // output[0][3][5]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][6]
  *out4 += *input_0 * *filter_0; // output[0][3][6]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++;  // output[0][3][7]

  *out5 += *input_0 * *filter_0; // output[0][4][0]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][1]
  *out5 += *input_0 * *filter_0; // output[0][4][1]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][2]
  *out5 += *input_0 * *filter_0; // output[0][4][2]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][3]
  *out5 += *input_0 * *filter_0; // output[0][4][3]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][4]
  *out5 += *input_0 * *filter_0; // output[0][4][4]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][5]
  *out5 += *input_0 * *filter_0; // output[0][4][5]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][6]
  *out5 += *input_0 * *filter_0; // output[0][4][6]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++;  // output[0][4][7]

  *out6 += *input_0 * *filter_0; // output[0][5][0]
  out6 += output_depth;
  *out6 += *input_1 * *filter_0++; // output[0][5][1]
  *out6 += *input_0 * *filter_0; // output[0][5][1]
  out6 += output_depth;
  *out6 += *input_1 * *filter_0++; // output[0][5][2]
  *out6 += *input_0 * *filter_0; // output[0][5][2]
  out6 += output_depth;
  *out6 += *input_1 * *filter_0++; // output[0][5][3]
  *out6 += *input_0 * *filter_0; // output[0][5][3]
  out6 += output_depth;
  *out6 += *input_1 * *filter_0++; // output[0][5][4]
  *out6 += *input_0 * *filter_0; // output[0][5][4]
  out6 += output_depth;
  *out6 += *input_1 * *filter_0++; // output[0][5][5]
  *out6 += *input_0 * *filter_0; // output[0][5][5]
  out6 += output_depth;
  *out6 += *input_1 * *filter_0++; // output[0][5][6]
  *out6 += *input_0 * *filter_0; // output[0][5][6]
  out6 += output_depth;
  *out6 += *input_1 * *filter_0++;  // output[0][5][7]

  *out7 += *input_0 * *filter_0; // output[0][6][0]
  out7 += output_depth;
  *out7 += *input_1 * *filter_0++; // output[0][6][1]
  *out7 += *input_0 * *filter_0; // output[0][6][1]
  out7 += output_depth;
  *out7 += *input_1 * *filter_0++; // output[0][6][2]
  *out7 += *input_0 * *filter_0; // output[0][6][2]
  out7 += output_depth;
  *out7 += *input_1 * *filter_0++; // output[0][6][3]
  *out7 += *input_0 * *filter_0; // output[0][6][3]
  out7 += output_depth;
  *out7 += *input_1 * *filter_0++; // output[0][6][4]
  *out7 += *input_0 * *filter_0; // output[0][6][4]
  out7 += output_depth;
  *out7 += *input_1 * *filter_0++; // output[0][6][5]
  *out7 += *input_0 * *filter_0; // output[0][6][5]
  out7 += output_depth;
  *out7 += *input_1 * *filter_0++; // output[0][6][6]
  *out7 += *input_0 * *filter_0; // output[0][6][6]
  out7 += output_depth;
  *out7 += *input_1 * *filter_0++;  // output[0][6][7]
}
/* END: For 7x7 kernel size, stride 1 */

/* START: For 7x7 kernel size, stride 2 */
static inline void transpose_mac_7row_7col_2input_2filter_2stride_fp(float* out, float* out2, float* out3, float* out4, float* out5, float* out6, float* out7,
                            const int output_depth, const float* input_0, const float* input_1, const float* filter_0, const float* filter_1) {
  *out++ += *input_0 * *filter_0++; // output[0][0][0]
  *out += *input_0 * *filter_1++; // output[1][0][0]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][1]
  *out += *input_0 * *filter_1++; // output[1][0][1]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0; // output[0][0][2]
  *out-- += *input_0 * *filter_1; // output[1][0][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out++ += *input_1 * *filter_0++; // output[0][0][2]
  *out += *input_1 * *filter_1++; // output[1][0][2]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0; // output[0][0][3]
  *out-- += *input_1 * *filter_1; // output[1][0][3]
  filter_0 += 2;
  filter_1 += 2;
  *out++ += *input_0 * *filter_0++; // output[0][0][3]
  *out += *input_0 * *filter_1++; // output[1][0][3]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0; // output[0][0][4]
  *out-- += *input_0 * *filter_1; // output[1][0][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out++ += *input_1 * *filter_0++; // output[0][0][4]
  *out += *input_1 * *filter_1++; // output[1][0][4]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0; // output[0][0][5]
  *out-- += *input_1 * *filter_1; // output[1][0][5]
  filter_0 += 2;
  filter_1 += 2;
  *out++ += *input_0 * *filter_0++; // output[0][0][5]
  *out += *input_0 * *filter_1++; // output[1][0][5]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0; // output[0][0][6]
  *out-- += *input_0 * *filter_1; // output[1][0][6]
  filter_0 -= 2;
  filter_1 -= 2;
  *out++ += *input_1 * *filter_0++; // output[0][0][6]
  *out += *input_1 * *filter_1++; // output[1][0][6]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0++; // output[0][0][7]
  *out += *input_1 * *filter_1++; // output[1][0][7]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0++; // output[0][0][8]
  *out += *input_1 * *filter_1++; // output[1][0][8]

  *out2++ += *input_0 * *filter_0++; // output[0][1][0]
  *out2 += *input_0 * *filter_1++; // output[1][1][0]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][1]
  *out2 += *input_0 * *filter_1++; // output[1][1][1]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0; // output[0][1][2]
  *out2-- += *input_0 * *filter_1; // output[1][1][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out2++ += *input_1 * *filter_0++; // output[0][1][2]
  *out2 += *input_1 * *filter_1++; // output[1][1][2]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0; // output[0][1][3]
  *out2-- += *input_1 * *filter_1; // output[1][1][3]
  filter_0 += 2;
  filter_1 += 2;
  *out2++ += *input_0 * *filter_0++; // output[0][1][3]
  *out2 += *input_0 * *filter_1++; // output[1][1][3]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0; // output[0][1][4]
  *out2-- += *input_0 * *filter_1; // output[1][1][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out2++ += *input_1 * *filter_0++; // output[0][1][4]
  *out2 += *input_1 * *filter_1++; // output[1][1][4]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0; // output[0][1][5]
  *out2-- += *input_1 * *filter_1; // output[1][1][5]
  filter_0 += 2;
  filter_1 += 2;
  *out2++ += *input_0 * *filter_0++; // output[0][1][5]
  *out2 += *input_0 * *filter_1++; // output[1][1][5]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0; // output[0][1][6]
  *out2-- += *input_0 * *filter_1; // output[1][1][6]
  filter_0 -= 2;
  filter_1 -= 2;
  *out2++ += *input_1 * *filter_0++; // output[0][1][6]
  *out2 += *input_1 * *filter_1++; // output[1][1][6]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0++; // output[0][1][7]
  *out2 += *input_1 * *filter_1++; // output[1][1][7]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0++; // output[0][1][8]
  *out2 += *input_1 * *filter_1++; // output[1][1][8]

  *out3++ += *input_0 * *filter_0++; // output[0][2][0]
  *out3 += *input_0 * *filter_1++; // output[1][2][0]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][1]
  *out3 += *input_0 * *filter_1++; // output[1][2][1]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0; // output[0][2][2]
  *out3-- += *input_0 * *filter_1; // output[1][2][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out3++ += *input_1 * *filter_0++; // output[0][2][2]
  *out3 += *input_1 * *filter_1++; // output[1][2][2]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0; // output[0][2][3]
  *out3-- += *input_1 * *filter_1; // output[1][2][3]
  filter_0 += 2;
  filter_1 += 2;
  *out3++ += *input_0 * *filter_0++; // output[0][2][3]
  *out3 += *input_0 * *filter_1++; // output[1][2][3]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0; // output[0][2][4]
  *out3-- += *input_0 * *filter_1; // output[1][2][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out3++ += *input_1 * *filter_0++; // output[0][2][4]
  *out3 += *input_1 * *filter_1++; // output[1][2][4]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0; // output[0][2][5]
  *out3-- += *input_1 * *filter_1; // output[1][2][5]
  filter_0 += 2;
  filter_1 += 2;
  *out3++ += *input_0 * *filter_0++; // output[0][2][5]
  *out3 += *input_0 * *filter_1++; // output[1][2][5]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0; // output[0][2][6]
  *out3-- += *input_0 * *filter_1; // output[1][2][6]
  filter_0 -= 2;
  filter_1 -= 2;
  *out3++ += *input_1 * *filter_0++; // output[0][2][6]
  *out3 += *input_1 * *filter_1++; // output[1][2][6]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0++; // output[0][2][7]
  *out3 += *input_1 * *filter_1++; // output[1][2][7]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0++; // output[0][2][8]
  *out3 += *input_1 * *filter_1++; // output[1][2][8]

  *out4++ += *input_0 * *filter_0++; // output[0][3][0]
  *out4 += *input_0 * *filter_1++; // output[1][3][0]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][1]
  *out4 += *input_0 * *filter_1++; // output[1][3][1]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0; // output[0][3][2]
  *out4-- += *input_0 * *filter_1; // output[1][3][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out4++ += *input_1 * *filter_0++; // output[0][3][2]
  *out4 += *input_1 * *filter_1++; // output[1][3][2]
  out4 += output_depth - 1;
  *out4++ += *input_1 * *filter_0; // output[0][3][3]
  *out4-- += *input_1 * *filter_1; // output[1][3][3]
  filter_0 += 2;
  filter_1 += 2;
  *out4++ += *input_0 * *filter_0++; // output[0][3][3]
  *out4 += *input_0 * *filter_1++; // output[1][3][3]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0; // output[0][3][4]
  *out4-- += *input_0 * *filter_1; // output[1][3][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out4++ += *input_1 * *filter_0++; // output[0][3][4]
  *out4 += *input_1 * *filter_1++; // output[1][3][4]
  out4 += output_depth - 1;
  *out4++ += *input_1 * *filter_0; // output[0][3][5]
  *out4-- += *input_1 * *filter_1; // output[1][3][5]
  filter_0 += 2;
  filter_1 += 2;
  *out4++ += *input_0 * *filter_0++; // output[0][3][5]
  *out4 += *input_0 * *filter_1++; // output[1][3][5]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0; // output[0][3][6]
  *out4-- += *input_0 * *filter_1; // output[1][3][6]
  filter_0 -= 2;
  filter_1 -= 2;
  *out4++ += *input_1 * *filter_0++; // output[0][3][6]
  *out4 += *input_1 * *filter_1++; // output[1][3][6]
  out4 += output_depth - 1;
  *out4++ += *input_1 * *filter_0++; // output[0][3][7]
  *out4 += *input_1 * *filter_1++; // output[1][3][7]
  out4 += output_depth - 1;
  *out4++ += *input_1 * *filter_0++; // output[0][3][8]
  *out4 += *input_1 * *filter_1++; // output[1][3][8]

  *out5++ += *input_0 * *filter_0++; // output[0][4][0]
  *out5 += *input_0 * *filter_1++; // output[1][4][0]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][1]
  *out5 += *input_0 * *filter_1++; // output[1][4][1]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0; // output[0][4][2]
  *out5-- += *input_0 * *filter_1; // output[1][4][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out5++ += *input_1 * *filter_0++; // output[0][4][2]
  *out5 += *input_1 * *filter_1++; // output[1][4][2]
  out5 += output_depth - 1;
  *out5++ += *input_1 * *filter_0; // output[0][4][3]
  *out5-- += *input_1 * *filter_1; // output[1][4][3]
  filter_0 += 2;
  filter_1 += 2;
  *out5++ += *input_0 * *filter_0++; // output[0][4][3]
  *out5 += *input_0 * *filter_1++; // output[1][4][3]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0; // output[0][4][4]
  *out5-- += *input_0 * *filter_1; // output[1][4][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out5++ += *input_1 * *filter_0++; // output[0][4][4]
  *out5 += *input_1 * *filter_1++; // output[1][4][4]
  out5 += output_depth - 1;
  *out5++ += *input_1 * *filter_0; // output[0][4][5]
  *out5-- += *input_1 * *filter_1; // output[1][4][5]
  filter_0 += 2;
  filter_1 += 2;
  *out5++ += *input_0 * *filter_0++; // output[0][4][5]
  *out5 += *input_0 * *filter_1++; // output[1][4][5]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0; // output[0][4][6]
  *out5-- += *input_0 * *filter_1; // output[1][4][6]
  filter_0 -= 2;
  filter_1 -= 2;
  *out5++ += *input_1 * *filter_0++; // output[0][4][6]
  *out5 += *input_1 * *filter_1++; // output[1][4][6]
  out5 += output_depth - 1;
  *out5++ += *input_1 * *filter_0++; // output[0][4][7]
  *out5 += *input_1 * *filter_1++; // output[1][4][7]
  out5 += output_depth - 1;
  *out5++ += *input_1 * *filter_0++; // output[0][4][8]
  *out5 += *input_1 * *filter_1++; // output[1][4][8]

  *out6++ += *input_0 * *filter_0++; // output[0][5][0]
  *out6 += *input_0 * *filter_1++; // output[1][5][0]
  out6 += output_depth - 1;
  *out6++ += *input_0 * *filter_0++; // output[0][5][1]
  *out6 += *input_0 * *filter_1++; // output[1][5][1]
  out6 += output_depth - 1;
  *out6++ += *input_0 * *filter_0; // output[0][5][2]
  *out6-- += *input_0 * *filter_1; // output[1][5][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out6++ += *input_1 * *filter_0++; // output[0][5][2]
  *out6 += *input_1 * *filter_1++; // output[1][5][2]
  out6 += output_depth - 1;
  *out6++ += *input_1 * *filter_0; // output[0][5][3]
  *out6-- += *input_1 * *filter_1; // output[1][5][3]
  filter_0 += 2;
  filter_1 += 2;
  *out6++ += *input_0 * *filter_0++; // output[0][5][3]
  *out6 += *input_0 * *filter_1++; // output[1][5][3]
  out6 += output_depth - 1;
  *out6++ += *input_0 * *filter_0; // output[0][5][4]
  *out6-- += *input_0 * *filter_1; // output[1][5][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out6++ += *input_1 * *filter_0++; // output[0][5][4]
  *out6 += *input_1 * *filter_1++; // output[1][5][4]
  out6 += output_depth - 1;
  *out6++ += *input_1 * *filter_0; // output[0][5][5]
  *out6-- += *input_1 * *filter_1; // output[1][5][5]
  filter_0 += 2;
  filter_1 += 2;
  *out6++ += *input_0 * *filter_0++; // output[0][5][5]
  *out6 += *input_0 * *filter_1++; // output[1][5][5]
  out6 += output_depth - 1;
  *out6++ += *input_0 * *filter_0; // output[0][5][6]
  *out6-- += *input_0 * *filter_1; // output[1][5][6]
  filter_0 -= 2;
  filter_1 -= 2;
  *out6++ += *input_1 * *filter_0++; // output[0][5][6]
  *out6 += *input_1 * *filter_1++; // output[1][5][6]
  out6 += output_depth - 1;
  *out6++ += *input_1 * *filter_0++; // output[0][5][7]
  *out6 += *input_1 * *filter_1++; // output[1][5][7]
  out6 += output_depth - 1;
  *out6++ += *input_1 * *filter_0++; // output[0][5][8]
  *out6 += *input_1 * *filter_1++; // output[1][5][8]

  *out7++ += *input_0 * *filter_0++; // output[0][6][0]
  *out7 += *input_0 * *filter_1++; // output[1][6][0]
  out7 += output_depth - 1;
  *out7++ += *input_0 * *filter_0++; // output[0][6][1]
  *out7 += *input_0 * *filter_1++; // output[1][6][1]
  out7 += output_depth - 1;
  *out7++ += *input_0 * *filter_0; // output[0][6][2]
  *out7-- += *input_0 * *filter_1; // output[1][6][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out7++ += *input_1 * *filter_0++; // output[0][6][2]
  *out7 += *input_1 * *filter_1++; // output[1][6][2]
  out7 += output_depth - 1;
  *out7++ += *input_1 * *filter_0; // output[0][6][3]
  *out7-- += *input_1 * *filter_1; // output[1][6][3]
  filter_0 += 2;
  filter_1 += 2;
  *out7++ += *input_0 * *filter_0++; // output[0][6][3]
  *out7 += *input_0 * *filter_1++; // output[1][6][3]
  out7 += output_depth - 1;
  *out7++ += *input_0 * *filter_0; // output[0][6][4]
  *out7-- += *input_0 * *filter_1; // output[1][6][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out7++ += *input_1 * *filter_0++; // output[0][6][4]
  *out7 += *input_1 * *filter_1++; // output[1][6][4]
  out7 += output_depth - 1;
  *out7++ += *input_1 * *filter_0; // output[0][6][5]
  *out7-- += *input_1 * *filter_1; // output[1][6][5]
  filter_0 += 2;
  filter_1 += 2;
  *out7++ += *input_0 * *filter_0++; // output[0][6][5]
  *out7 += *input_0 * *filter_1++; // output[1][6][5]
  out7 += output_depth - 1;
  *out7++ += *input_0 * *filter_0; // output[0][6][6]
  *out7-- += *input_0 * *filter_1; // output[1][6][6]
  filter_0 -= 2;
  filter_1 -= 2;
  *out7++ += *input_1 * *filter_0++; // output[0][6][6]
  *out7 += *input_1 * *filter_1++; // output[1][6][6]
  out7 += output_depth - 1;
  *out7++ += *input_1 * *filter_0++; // output[0][6][7]
  *out7 += *input_1 * *filter_1++; // output[1][6][7]
  out7 += output_depth - 1;
  *out7++ += *input_1 * *filter_0++; // output[0][6][8]
  *out7 += *input_1 * *filter_1++; // output[1][6][8]
}

static inline void transpose_mac_7row_7col_2input_1filter_2stride_fp(float* out, float* out2, float* out3, float* out4, float* out5, float* out6, float* out7,
                            const int output_depth, const float* input_0, const float* input_1, const float* filter_0) {
  *out += *input_0 * *filter_0++; // output[0][0][0]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][1]
  out += output_depth;
  *out += *input_0 * *filter_0; // output[0][0][2]
  filter_0 -= 2;
  *out += *input_1 * *filter_0++; // output[0][0][2]
  out += output_depth;
  *out += *input_1 * *filter_0; // output[0][0][3]
  filter_0 += 2;
  *out += *input_0 * *filter_0++; // output[0][0][3]
  out += output_depth;
  *out += *input_0 * *filter_0; // output[0][0][4]
  filter_0 -= 2;
  *out += *input_1 * *filter_0++; // output[0][0][4]
  out += output_depth;
  *out += *input_1 * *filter_0; // output[0][0][5]
  filter_0 += 2;
  *out += *input_0 * *filter_0++; // output[0][0][5]
  out += output_depth;
  *out += *input_0 * *filter_0; // output[0][0][6]
  filter_0 -= 2;
  *out += *input_1 * *filter_0++; // output[0][0][6]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][7]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][8]

  *out2 += *input_0 * *filter_0++; // output[0][1][0]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][1]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0; // output[0][1][2]
  filter_0 -= 2;
  *out2 += *input_1 * *filter_0++; // output[0][1][2]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0; // output[0][1][3]
  filter_0 += 2;
  *out2 += *input_0 * *filter_0++; // output[0][1][3]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0; // output[0][1][4]
  filter_0 -= 2;
  *out2 += *input_1 * *filter_0++; // output[0][1][4]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0; // output[0][1][5]
  filter_0 += 2;
  *out2 += *input_0 * *filter_0++; // output[0][1][5]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0; // output[0][1][6]
  filter_0 -= 2;
  *out2 += *input_1 * *filter_0++; // output[0][1][6]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][7]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][8]

  *out3 += *input_0 * *filter_0++; // output[0][2][0]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][1]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0; // output[0][2][2]
  filter_0 -= 2;
  *out3 += *input_1 * *filter_0++; // output[0][2][2]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0; // output[0][2][3]
  filter_0 += 2;
  *out3 += *input_0 * *filter_0++; // output[0][2][3]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0; // output[0][2][4]
  filter_0 -= 2;
  *out3 += *input_1 * *filter_0++; // output[0][2][4]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0; // output[0][2][5]
  filter_0 += 2;
  *out3 += *input_0 * *filter_0++; // output[0][2][5]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0; // output[0][2][6]
  filter_0 -= 2;
  *out3 += *input_1 * *filter_0++; // output[0][2][6]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][7]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][8]

  *out4 += *input_0 * *filter_0++; // output[0][3][0]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][1]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0; // output[0][3][2]
  filter_0 -= 2;
  *out4 += *input_1 * *filter_0++; // output[0][3][2]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0; // output[0][3][3]
  filter_0 += 2;
  *out4 += *input_0 * *filter_0++; // output[0][3][3]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0; // output[0][3][4]
  filter_0 -= 2;
  *out4 += *input_1 * *filter_0++; // output[0][3][4]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0; // output[0][3][5]
  filter_0 += 2;
  *out4 += *input_0 * *filter_0++; // output[0][3][5]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0; // output[0][3][6]
  filter_0 -= 2;
  *out4 += *input_1 * *filter_0++; // output[0][3][6]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][7]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][8]

  *out5 += *input_0 * *filter_0++; // output[0][4][0]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][1]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0; // output[0][4][2]
  filter_0 -= 2;
  *out5 += *input_1 * *filter_0++; // output[0][4][2]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0; // output[0][4][3]
  filter_0 += 2;
  *out5 += *input_0 * *filter_0++; // output[0][4][3]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0; // output[0][4][4]
  filter_0 -= 2;
  *out5 += *input_1 * *filter_0++; // output[0][4][4]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0; // output[0][4][5]
  filter_0 += 2;
  *out5 += *input_0 * *filter_0++; // output[0][4][5]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0; // output[0][4][6]
  filter_0 -= 2;
  *out5 += *input_1 * *filter_0++; // output[0][4][6]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][7]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][8]

  *out6 += *input_0 * *filter_0++; // output[0][5][0]
  out6 += output_depth;
  *out6 += *input_0 * *filter_0++; // output[0][5][1]
  out6 += output_depth;
  *out6 += *input_0 * *filter_0; // output[0][5][2]
  filter_0 -= 2;
  *out6 += *input_1 * *filter_0++; // output[0][5][2]
  out6 += output_depth;
  *out6 += *input_1 * *filter_0; // output[0][5][3]
  filter_0 += 2;
  *out6 += *input_0 * *filter_0++; // output[0][5][3]
  out6 += output_depth;
  *out6 += *input_0 * *filter_0; // output[0][5][4]
  filter_0 -= 2;
  *out6 += *input_1 * *filter_0++; // output[0][5][4]
  out6 += output_depth;
  *out6 += *input_1 * *filter_0; // output[0][5][5]
  filter_0 += 2;
  *out6 += *input_0 * *filter_0++; // output[0][5][5]
  out6 += output_depth;
  *out6 += *input_0 * *filter_0; // output[0][5][6]
  filter_0 -= 2;
  *out6 += *input_1 * *filter_0++; // output[0][5][6]
  out6 += output_depth;
  *out6 += *input_1 * *filter_0++; // output[0][5][7]
  out6 += output_depth;
  *out6 += *input_1 * *filter_0++; // output[0][5][8]

  *out7 += *input_0 * *filter_0++; // output[0][6][0]
  out7 += output_depth;
  *out7 += *input_0 * *filter_0++; // output[0][6][1]
  out7 += output_depth;
  *out7 += *input_0 * *filter_0; // output[0][6][2]
  filter_0 -= 2;
  *out7 += *input_1 * *filter_0++; // output[0][6][2]
  out7 += output_depth;
  *out7 += *input_1 * *filter_0; // output[0][6][3]
  filter_0 += 2;
  *out7 += *input_0 * *filter_0++; // output[0][6][3]
  out7 += output_depth;
  *out7 += *input_0 * *filter_0; // output[0][6][4]
  filter_0 -= 2;
  *out7 += *input_1 * *filter_0++; // output[0][6][4]
  out7 += output_depth;
  *out7 += *input_1 * *filter_0; // output[0][6][5]
  filter_0 += 2;
  *out7 += *input_0 * *filter_0++; // output[0][6][5]
  out7 += output_depth;
  *out7 += *input_0 * *filter_0; // output[0][6][6]
  filter_0 -= 2;
  *out7 += *input_1 * *filter_0++; // output[0][6][6]
  out7 += output_depth;
  *out7 += *input_1 * *filter_0++; // output[0][6][7]
  out7 += output_depth;
  *out7 += *input_1 * *filter_0++; // output[0][6][8]
}
/* END: For 7x7 kernel size, stride 2 */


/* START: For 5x5 kernel size, whatever stride */
static inline void transpose_mac_5row_5col_1input_2filter_xstride_fp(float* out, float* out2, float* out3, float* out4, float* out5, const int output_depth, 
                      const float* input_0, const float* filter_0, const float* filter_1) {
  *out++ += *input_0 * *filter_0++; // output[0][0][0]
  *out += *input_0 * *filter_1++; // output[1][0][0]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][1]
  *out += *input_0 * *filter_1++; // output[1][0][1]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][2]
  *out += *input_0 * *filter_1++; // output[1][0][2]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][3]
  *out += *input_0 * *filter_1++; // output[1][0][3]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][4]
  *out += *input_0 * *filter_1++; // output[1][0][4]

  *out2++ += *input_0 * *filter_0++; // output[0][1][0]
  *out2 += *input_0 * *filter_1++; // output[1][1][0]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][1]
  *out2 += *input_0 * *filter_1++; // output[1][1][1]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][2]
  *out2 += *input_0 * *filter_1++; // output[1][1][2]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][3]
  *out2 += *input_0 * *filter_1++; // output[1][1][3]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][4]
  *out2 += *input_0 * *filter_1++; // output[1][1][4]

  *out3++ += *input_0 * *filter_0++; // output[0][2][0]
  *out3 += *input_0 * *filter_1++; // output[1][2][0]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][1]
  *out3 += *input_0 * *filter_1++; // output[1][2][1]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][2]
  *out3 += *input_0 * *filter_1++; // output[1][2][2]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][3]
  *out3 += *input_0 * *filter_1++; // output[1][2][3]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][4]
  *out3 += *input_0 * *filter_1++; // output[1][2][4]

  *out4++ += *input_0 * *filter_0++; // output[0][3][0]
  *out4 += *input_0 * *filter_1++; // output[1][3][0]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][1]
  *out4 += *input_0 * *filter_1++; // output[1][3][1]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][2]
  *out4 += *input_0 * *filter_1++; // output[1][3][2]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][3]
  *out4 += *input_0 * *filter_1++; // output[1][3][3]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][4]
  *out4 += *input_0 * *filter_1++; // output[1][3][4]

  *out5++ += *input_0 * *filter_0++; // output[0][4][0]
  *out5 += *input_0 * *filter_1++; // output[1][4][0]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][1]
  *out5 += *input_0 * *filter_1++; // output[1][4][1]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][2]
  *out5 += *input_0 * *filter_1++; // output[1][4][2]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][3]
  *out5 += *input_0 * *filter_1++; // output[1][4][3]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][4]
  *out5 += *input_0 * *filter_1++; // output[1][4][4]
}

static inline void transpose_mac_5row_5col_1input_1filter_xstride_fp(float* out, float* out2, float* out3, float* out4, float* out5, const int output_depth, 
                      const float* input_0, const float* filter_0) {

  *out += *input_0 * *filter_0++; // output[0][0][0]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][1]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][2]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][3]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][4]

  *out2 += *input_0 * *filter_0++; // output[0][1][0]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][1]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][2]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][3]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][4]

  *out3 += *input_0 * *filter_0++; // output[0][2][0]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][1]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][2]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][3]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][4]

  *out4 += *input_0 * *filter_0++; // output[0][3][0]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][1]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][2]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][3]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][4]

  *out5 += *input_0 * *filter_0++; // output[0][4][0]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][1]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][2]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][3]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][4]

}
/* END: For 5x5 kernel size, whatever stride */

/* START: For 5x5 kernel size, stride 1 */
static inline void transpose_mac_5row_5col_2input_2filter_1stride_fp(float* out, float* out2, float* out3, float* out4, float* out5, const int output_depth, 
                      const float* input_0, const float* input_1, const float* filter_0, const float* filter_1) {
  *out++ += *input_0 * *filter_0; // output[0][0][0]
  *out += *input_0 * *filter_1; // output[1][0][0]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][1]
  *out++ += *input_0 * *filter_0; // output[0][0][1]
  *out += *input_1 * *filter_1++; // output[1][0][1]
  *out += *input_0 * *filter_1; // output[1][0][1]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][2]
  *out++ += *input_0 * *filter_0; // output[0][0][2]
  *out += *input_1 * *filter_1++; // output[1][0][2]
  *out += *input_0 * *filter_1; // output[1][0][2]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][3]
  *out++ += *input_0 * *filter_0; // output[0][0][3]
  *out += *input_1 * *filter_1++; // output[1][0][3]
  *out += *input_0 * *filter_1; // output[1][0][3]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][4]
  *out++ += *input_0 * *filter_0; // output[0][0][4]
  *out += *input_1 * *filter_1++; // output[1][0][4]
  *out += *input_0 * *filter_1; // output[1][0][4]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0++;  // output[0][0][5]
  *out += *input_1 * *filter_1++;  // output[1][0][5]

  *out2++ += *input_0 * *filter_0; // output[0][1][0]
  *out2 += *input_0 * *filter_1; // output[1][1][0]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][1]
  *out2++ += *input_0 * *filter_0; // output[0][1][1]
  *out2 += *input_1 * *filter_1++; // output[1][1][1]
  *out2 += *input_0 * *filter_1; // output[1][1][1]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][2]
  *out2++ += *input_0 * *filter_0; // output[0][1][2]
  *out2 += *input_1 * *filter_1++; // output[1][1][2]
  *out2 += *input_0 * *filter_1; // output[1][1][2]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][3]
  *out2++ += *input_0 * *filter_0; // output[0][1][3]
  *out2 += *input_1 * *filter_1++; // output[1][1][3]
  *out2 += *input_0 * *filter_1; // output[1][1][3]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][4]
  *out2++ += *input_0 * *filter_0; // output[0][1][4]
  *out2 += *input_1 * *filter_1++; // output[1][1][4]
  *out2 += *input_0 * *filter_1; // output[1][1][4]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0++;  // output[0][1][5]
  *out2 += *input_1 * *filter_1++;  // output[1][1][5]

  *out3++ += *input_0 * *filter_0; // output[0][2][0]
  *out3 += *input_0 * *filter_1; // output[1][2][0]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][1]
  *out3++ += *input_0 * *filter_0; // output[0][2][1]
  *out3 += *input_1 * *filter_1++; // output[1][2][1]
  *out3 += *input_0 * *filter_1; // output[1][2][1]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][2]
  *out3++ += *input_0 * *filter_0; // output[0][2][2]
  *out3 += *input_1 * *filter_1++; // output[1][2][2]
  *out3 += *input_0 * *filter_1; // output[1][2][2]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][3]
  *out3++ += *input_0 * *filter_0; // output[0][2][3]
  *out3 += *input_1 * *filter_1++; // output[1][2][3]
  *out3 += *input_0 * *filter_1; // output[1][2][3]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][4]
  *out3++ += *input_0 * *filter_0; // output[0][2][4]
  *out3 += *input_1 * *filter_1++; // output[1][2][4]
  *out3 += *input_0 * *filter_1; // output[1][2][4]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0++;  // output[0][2][5]
  *out3 += *input_1 * *filter_1++;  // output[1][2][5]

  *out4++ += *input_0 * *filter_0; // output[0][3][0]
  *out4 += *input_0 * *filter_1; // output[1][3][0]
  out4 += output_depth - 1;
  *out4 += *input_1 * *filter_0++; // output[0][3][1]
  *out4++ += *input_0 * *filter_0; // output[0][3][1]
  *out4 += *input_1 * *filter_1++; // output[1][3][1]
  *out4 += *input_0 * *filter_1; // output[1][3][1]
  out4 += output_depth - 1;
  *out4 += *input_1 * *filter_0++; // output[0][3][2]
  *out4++ += *input_0 * *filter_0; // output[0][3][2]
  *out4 += *input_1 * *filter_1++; // output[1][3][2]
  *out4 += *input_0 * *filter_1; // output[1][3][2]
  out4 += output_depth - 1;
  *out4 += *input_1 * *filter_0++; // output[0][3][3]
  *out4++ += *input_0 * *filter_0; // output[0][3][3]
  *out4 += *input_1 * *filter_1++; // output[1][3][3]
  *out4 += *input_0 * *filter_1; // output[1][3][3]
  out4 += output_depth - 1;
  *out4 += *input_1 * *filter_0++; // output[0][3][4]
  *out4++ += *input_0 * *filter_0; // output[0][3][4]
  *out4 += *input_1 * *filter_1++; // output[1][3][4]
  *out4 += *input_0 * *filter_1; // output[1][3][4]
  out4 += output_depth - 1;
  *out4++ += *input_1 * *filter_0++;  // output[0][3][5]
  *out4 += *input_1 * *filter_1++;  // output[1][3][5]

  *out5++ += *input_0 * *filter_0; // output[0][4][0]
  *out5 += *input_0 * *filter_1; // output[1][4][0]
  out5 += output_depth - 1;
  *out5 += *input_1 * *filter_0++; // output[0][4][1]
  *out5++ += *input_0 * *filter_0; // output[0][4][1]
  *out5 += *input_1 * *filter_1++; // output[1][4][1]
  *out5 += *input_0 * *filter_1; // output[1][4][1]
  out5 += output_depth - 1;
  *out5 += *input_1 * *filter_0++; // output[0][4][2]
  *out5++ += *input_0 * *filter_0; // output[0][4][2]
  *out5 += *input_1 * *filter_1++; // output[1][4][2]
  *out5 += *input_0 * *filter_1; // output[1][4][2]
  out5 += output_depth - 1;
  *out5 += *input_1 * *filter_0++; // output[0][4][3]
  *out5++ += *input_0 * *filter_0; // output[0][4][3]
  *out5 += *input_1 * *filter_1++; // output[1][4][3]
  *out5 += *input_0 * *filter_1; // output[1][4][3]
  out5 += output_depth - 1;
  *out5 += *input_1 * *filter_0++; // output[0][4][4]
  *out5++ += *input_0 * *filter_0; // output[0][4][4]
  *out5 += *input_1 * *filter_1++; // output[1][4][4]
  *out5 += *input_0 * *filter_1; // output[1][4][4]
  out5 += output_depth - 1;
  *out5++ += *input_1 * *filter_0++;  // output[0][4][5]
  *out5 += *input_1 * *filter_1++;  // output[1][4][5]
}

static inline void transpose_mac_5row_5col_2input_1filter_1stride_fp(float* out, float* out2, float* out3, float* out4, float* out5, const int output_depth, 
                      const float* input_0, const float* input_1, const float* filter_0) {
  *out += *input_0 * *filter_0; // output[0][0][0]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][1]
  *out += *input_0 * *filter_0; // output[0][0][1]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][2]
  *out += *input_0 * *filter_0; // output[0][0][2]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][3]
  *out += *input_0 * *filter_0; // output[0][0][3]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][4]
  *out += *input_0 * *filter_0; // output[0][0][4]
  out += output_depth;
  *out += *input_1 * *filter_0++;  // output[0][0][5]

  *out2 += *input_0 * *filter_0; // output[0][1][0]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][1]
  *out2 += *input_0 * *filter_0; // output[0][1][1]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][2]
  *out2 += *input_0 * *filter_0; // output[0][1][2]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][3]
  *out2 += *input_0 * *filter_0; // output[0][1][3]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][4]
  *out2 += *input_0 * *filter_0; // output[0][1][4]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++;  // output[0][1][5]

  *out3 += *input_0 * *filter_0; // output[0][2][0]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][1]
  *out3 += *input_0 * *filter_0; // output[0][2][1]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][2]
  *out3 += *input_0 * *filter_0; // output[0][2][2]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][3]
  *out3 += *input_0 * *filter_0; // output[0][2][3]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][4]
  *out3 += *input_0 * *filter_0; // output[0][2][4]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++;  // output[0][2][5]

  *out4 += *input_0 * *filter_0; // output[0][3][0]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][1]
  *out4 += *input_0 * *filter_0; // output[0][3][1]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][2]
  *out4 += *input_0 * *filter_0; // output[0][3][2]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][3]
  *out4 += *input_0 * *filter_0; // output[0][3][3]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][4]
  *out4 += *input_0 * *filter_0; // output[0][3][4]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++;  // output[0][3][5]

  *out5 += *input_0 * *filter_0; // output[0][4][0]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][1]
  *out5 += *input_0 * *filter_0; // output[0][4][1]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][2]
  *out5 += *input_0 * *filter_0; // output[0][4][2]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][3]
  *out5 += *input_0 * *filter_0; // output[0][4][3]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][4]
  *out5 += *input_0 * *filter_0; // output[0][4][4]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++;  // output[0][4][5]
}
/* END: For 5x5 kernel size, stride 1 */

/* START: For 5x5 kernel size, stride 2 */
static inline void transpose_mac_5row_5col_2input_2filter_2stride_fp(float* out, float* out2, float* out3, float* out4, float* out5, const int output_depth, 
                      const float* input_0, const float* input_1, const float* filter_0, const float* filter_1) {
  *out++ += *input_0 * *filter_0++; // output[0][0][0]
  *out += *input_0 * *filter_1++; // output[1][0][0]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][1]
  *out += *input_0 * *filter_1++; // output[1][0][1]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0; // output[0][0][2]
  *out-- += *input_0 * *filter_1; // output[1][0][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out++ += *input_1 * *filter_0++; // output[0][0][2]
  *out += *input_1 * *filter_1++; // output[1][0][2]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0; // output[0][0][3]
  *out-- += *input_1 * *filter_1; // output[1][0][3]
  filter_0 += 2;
  filter_1 += 2;
  *out++ += *input_0 * *filter_0++; // output[0][0][3]
  *out += *input_0 * *filter_1++; // output[1][0][3]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0; // output[0][0][4]
  *out-- += *input_0 * *filter_1; // output[1][0][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out++ += *input_1 * *filter_0++; // output[0][0][4]
  *out += *input_1 * *filter_1++; // output[1][0][4]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0++; // output[0][0][5]
  *out += *input_1 * *filter_1++; // output[1][0][5]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0++; // output[0][0][6]
  *out += *input_1 * *filter_1++; // output[1][0][6]

  *out2++ += *input_0 * *filter_0++; // output[0][1][0]
  *out2 += *input_0 * *filter_1++; // output[1][1][0]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][1]
  *out2 += *input_0 * *filter_1++; // output[1][1][1]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0; // output[0][1][2]
  *out2-- += *input_0 * *filter_1; // output[1][1][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out2++ += *input_1 * *filter_0++; // output[0][1][2]
  *out2 += *input_1 * *filter_1++; // output[1][1][2]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0; // output[0][1][3]
  *out2-- += *input_1 * *filter_1; // output[1][1][3]
  filter_0 += 2;
  filter_1 += 2;
  *out2++ += *input_0 * *filter_0++; // output[0][1][3]
  *out2 += *input_0 * *filter_1++; // output[1][1][3]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0; // output[0][1][4]
  *out2-- += *input_0 * *filter_1; // output[1][1][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out2++ += *input_1 * *filter_0++; // output[0][1][4]
  *out2 += *input_1 * *filter_1++; // output[1][1][4]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0++; // output[0][1][5]
  *out2 += *input_1 * *filter_1++; // output[1][1][5]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0++; // output[0][1][6]
  *out2 += *input_1 * *filter_1++; // output[1][1][6]

  *out3++ += *input_0 * *filter_0++; // output[0][2][0]
  *out3 += *input_0 * *filter_1++; // output[1][2][0]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][1]
  *out3 += *input_0 * *filter_1++; // output[1][2][1]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0; // output[0][2][2]
  *out3-- += *input_0 * *filter_1; // output[1][2][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out3++ += *input_1 * *filter_0++; // output[0][2][2]
  *out3 += *input_1 * *filter_1++; // output[1][2][2]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0; // output[0][2][3]
  *out3-- += *input_1 * *filter_1; // output[1][2][3]
  filter_0 += 2;
  filter_1 += 2;
  *out3++ += *input_0 * *filter_0++; // output[0][2][3]
  *out3 += *input_0 * *filter_1++; // output[1][2][3]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0; // output[0][2][4]
  *out3-- += *input_0 * *filter_1; // output[1][2][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out3++ += *input_1 * *filter_0++; // output[0][2][4]
  *out3 += *input_1 * *filter_1++; // output[1][2][4]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0++; // output[0][2][5]
  *out3 += *input_1 * *filter_1++; // output[1][2][5]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0++; // output[0][2][6]
  *out3 += *input_1 * *filter_1++; // output[1][2][6]

  *out4++ += *input_0 * *filter_0++; // output[0][3][0]
  *out4 += *input_0 * *filter_1++; // output[1][3][0]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0++; // output[0][3][1]
  *out4 += *input_0 * *filter_1++; // output[1][3][1]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0; // output[0][3][2]
  *out4-- += *input_0 * *filter_1; // output[1][3][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out4++ += *input_1 * *filter_0++; // output[0][3][2]
  *out4 += *input_1 * *filter_1++; // output[1][3][2]
  out4 += output_depth - 1;
  *out4++ += *input_1 * *filter_0; // output[0][3][3]
  *out4-- += *input_1 * *filter_1; // output[1][3][3]
  filter_0 += 2;
  filter_1 += 2;
  *out4++ += *input_0 * *filter_0++; // output[0][3][3]
  *out4 += *input_0 * *filter_1++; // output[1][3][3]
  out4 += output_depth - 1;
  *out4++ += *input_0 * *filter_0; // output[0][3][4]
  *out4-- += *input_0 * *filter_1; // output[1][3][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out4++ += *input_1 * *filter_0++; // output[0][3][4]
  *out4 += *input_1 * *filter_1++; // output[1][3][4]
  out4 += output_depth - 1;
  *out4++ += *input_1 * *filter_0++; // output[0][3][5]
  *out4 += *input_1 * *filter_1++; // output[1][3][5]
  out4 += output_depth - 1;
  *out4++ += *input_1 * *filter_0++; // output[0][3][6]
  *out4 += *input_1 * *filter_1++; // output[1][3][6]

  *out5++ += *input_0 * *filter_0++; // output[0][4][0]
  *out5 += *input_0 * *filter_1++; // output[1][4][0]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0++; // output[0][4][1]
  *out5 += *input_0 * *filter_1++; // output[1][4][1]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0; // output[0][4][2]
  *out5-- += *input_0 * *filter_1; // output[1][4][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out5++ += *input_1 * *filter_0++; // output[0][4][2]
  *out5 += *input_1 * *filter_1++; // output[1][4][2]
  out5 += output_depth - 1;
  *out5++ += *input_1 * *filter_0; // output[0][4][3]
  *out5-- += *input_1 * *filter_1; // output[1][4][3]
  filter_0 += 2;
  filter_1 += 2;
  *out5++ += *input_0 * *filter_0++; // output[0][4][3]
  *out5 += *input_0 * *filter_1++; // output[1][4][3]
  out5 += output_depth - 1;
  *out5++ += *input_0 * *filter_0; // output[0][4][4]
  *out5-- += *input_0 * *filter_1; // output[1][4][4]
  filter_0 -= 2;
  filter_1 -= 2;
  *out5++ += *input_1 * *filter_0++; // output[0][4][4]
  *out5 += *input_1 * *filter_1++; // output[1][4][4]
  out5 += output_depth - 1;
  *out5++ += *input_1 * *filter_0++; // output[0][4][5]
  *out5 += *input_1 * *filter_1++; // output[1][4][5]
  out5 += output_depth - 1;
  *out5++ += *input_1 * *filter_0++; // output[0][4][6]
  *out5 += *input_1 * *filter_1++; // output[1][4][6]
}

static inline void transpose_mac_5row_5col_2input_1filter_2stride_fp(float* out, float* out2, float* out3, float* out4, float* out5, const int output_depth, 
                      const float* input_0, const float* input_1, const float* filter_0) {
  *out += *input_0 * *filter_0++; // output[0][0][0]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][1]
  out += output_depth;
  *out += *input_0 * *filter_0; // output[0][0][2]
  filter_0 -= 2;
  *out += *input_1 * *filter_0++; // output[0][0][2]
  out += output_depth;
  *out += *input_1 * *filter_0; // output[0][0][3]
  filter_0 += 2;
  *out += *input_0 * *filter_0++; // output[0][0][3]
  out += output_depth;
  *out += *input_0 * *filter_0; // output[0][0][4]
  filter_0 -= 2;
  *out += *input_1 * *filter_0++; // output[0][0][4]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][5]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][6]

  *out2 += *input_0 * *filter_0++; // output[0][1][0]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][1]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0; // output[0][1][2]
  filter_0 -= 2;
  *out2 += *input_1 * *filter_0++; // output[0][1][2]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0; // output[0][1][3]
  filter_0 += 2;
  *out2 += *input_0 * *filter_0++; // output[0][1][3]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0; // output[0][1][4]
  filter_0 -= 2;
  *out2 += *input_1 * *filter_0++; // output[0][1][4]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][5]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][6]

  *out3 += *input_0 * *filter_0++; // output[0][2][0]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][1]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0; // output[0][2][2]
  filter_0 -= 2;
  *out3 += *input_1 * *filter_0++; // output[0][2][2]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0; // output[0][2][3]
  filter_0 += 2;
  *out3 += *input_0 * *filter_0++; // output[0][2][3]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0; // output[0][2][4]
  filter_0 -= 2;
  *out3 += *input_1 * *filter_0++; // output[0][2][4]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][5]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][6]

  *out4 += *input_0 * *filter_0++; // output[0][3][0]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0++; // output[0][3][1]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0; // output[0][3][2]
  filter_0 -= 2;
  *out4 += *input_1 * *filter_0++; // output[0][3][2]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0; // output[0][3][3]
  filter_0 += 2;
  *out4 += *input_0 * *filter_0++; // output[0][3][3]
  out4 += output_depth;
  *out4 += *input_0 * *filter_0; // output[0][3][4]
  filter_0 -= 2;
  *out4 += *input_1 * *filter_0++; // output[0][3][4]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][5]
  out4 += output_depth;
  *out4 += *input_1 * *filter_0++; // output[0][3][6]

  *out5 += *input_0 * *filter_0++; // output[0][4][0]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0++; // output[0][4][1]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0; // output[0][4][2]
  filter_0 -= 2;
  *out5 += *input_1 * *filter_0++; // output[0][4][2]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0; // output[0][4][3]
  filter_0 += 2;
  *out5 += *input_0 * *filter_0++; // output[0][4][3]
  out5 += output_depth;
  *out5 += *input_0 * *filter_0; // output[0][4][4]
  filter_0 -= 2;
  *out5 += *input_1 * *filter_0++; // output[0][4][4]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][5]
  out5 += output_depth;
  *out5 += *input_1 * *filter_0++; // output[0][4][6]
}
/* END: For 5x5 kernel size, stride 2 */


/* START: For 3x3 kernel size, whatever stride */
static inline void transpose_mac_3row_3col_1input_2filter_xstride_fp(float* out, float* out2, float* out3, const int output_depth, 
                      const float* input_0, const float* filter_0, const float* filter_1) {
  *out++ += *input_0 * *filter_0++; // output[0][0][0]
  *out += *input_0 * *filter_1++; // output[1][0][0]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][1]
  *out += *input_0 * *filter_1++; // output[1][0][1]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][2]
  *out += *input_0 * *filter_1++; // output[1][0][2]

  *out2++ += *input_0 * *filter_0++; // output[0][1][0]
  *out2 += *input_0 * *filter_1++; // output[1][1][0]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][1]
  *out2 += *input_0 * *filter_1++; // output[1][1][1]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][2]
  *out2 += *input_0 * *filter_1++; // output[1][1][2]

  *out3++ += *input_0 * *filter_0++; // output[0][2][0]
  *out3 += *input_0 * *filter_1++; // output[1][2][0]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][1]
  *out3 += *input_0 * *filter_1++; // output[1][2][1]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][2]
  *out3 += *input_0 * *filter_1++; // output[1][2][2]
}

static inline void transpose_mac_3row_3col_1input_1filter_xstride_fp(float* out, float* out2, float* out3, const int output_depth, 
                      const float* input_0, const float* filter_0) {
  *out += *input_0 * *filter_0++; // output[0][0][0]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][1]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][2]

  *out2 += *input_0 * *filter_0++; // output[0][1][0]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][1]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][2]

  *out3 += *input_0 * *filter_0++; // output[0][2][0]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][1]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][2]
}
/* END: For 3x3 kernel size, whatever stride */

/* START: For 3x3 kernel size, stride 1 */
static inline void transpose_mac_3row_3col_2input_2filter_1stride_fp(float* out, float* out2, float* out3, const int output_depth, 
                      const float* input_0, const float* input_1, const float* filter_0, const float* filter_1) {
  *out++ += *input_0 * *filter_0; // output[0][0][0]
  *out += *input_0 * *filter_1; // output[1][0][0]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][1]
  *out++ += *input_0 * *filter_0; // output[0][0][1]
  *out += *input_1 * *filter_1++; // output[1][0][1]
  *out += *input_0 * *filter_1; // output[1][0][1]
  out += output_depth - 1;
  *out += *input_1 * *filter_0++; // output[0][0][2]
  *out++ += *input_0 * *filter_0; // output[0][0][2]
  *out += *input_1 * *filter_1++; // output[1][0][2]
  *out += *input_0 * *filter_1; // output[1][0][2]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0++;  // output[0][0][3]
  *out += *input_1 * *filter_1++;  // output[1][0][3]

  *out2++ += *input_0 * *filter_0; // output[0][1][0]
  *out2 += *input_0 * *filter_1; // output[1][1][0]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][1]
  *out2++ += *input_0 * *filter_0; // output[0][1][1]
  *out2 += *input_1 * *filter_1++; // output[1][1][1]
  *out2 += *input_0 * *filter_1; // output[1][1][1]
  out2 += output_depth - 1;
  *out2 += *input_1 * *filter_0++; // output[0][1][2]
  *out2++ += *input_0 * *filter_0; // output[0][1][2]
  *out2 += *input_1 * *filter_1++; // output[1][1][2]
  *out2 += *input_0 * *filter_1; // output[1][1][2]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0++;  // output[0][1][3]
  *out2 += *input_1 * *filter_1++;  // output[1][1][3]

  *out3++ += *input_0 * *filter_0; // output[0][2][0]
  *out3 += *input_0 * *filter_1; // output[1][2][0]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][1]
  *out3++ += *input_0 * *filter_0; // output[0][2][1]
  *out3 += *input_1 * *filter_1++; // output[1][2][1]
  *out3 += *input_0 * *filter_1; // output[1][2][1]
  out3 += output_depth - 1;
  *out3 += *input_1 * *filter_0++; // output[0][2][2]
  *out3++ += *input_0 * *filter_0; // output[0][2][2]
  *out3 += *input_1 * *filter_1++; // output[1][2][2]
  *out3 += *input_0 * *filter_1; // output[1][2][2]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0++;  // output[0][2][3]
  *out3 += *input_1 * *filter_1++;  // output[1][2][3]
}

static inline void transpose_mac_3row_3col_2input_1filter_1stride_fp(float* out, float* out2, float* out3, const int output_depth, 
                      const float* input_0, const float* input_1, const float* filter_0) {
  *out += *input_0 * *filter_0; // output[0][0][0]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][1]
  *out += *input_0 * *filter_0; // output[0][0][1]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][2]
  *out += *input_0 * *filter_0; // output[0][0][2]
  out += output_depth;
  *out += *input_1 * *filter_0++;  // output[0][0][3]

  *out2 += *input_0 * *filter_0; // output[0][1][0]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][1]
  *out2 += *input_0 * *filter_0; // output[0][1][1]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][2]
  *out2 += *input_0 * *filter_0; // output[0][1][2]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++;  // output[0][1][3]

  *out3 += *input_0 * *filter_0; // output[0][2][0]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][1]
  *out3 += *input_0 * *filter_0; // output[0][2][1]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][2]
  *out3 += *input_0 * *filter_0; // output[0][2][2]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++;  // output[0][2][3]
}
/* END: For 3x3 kernel size, stride 1 */

/* START: For 3x3 kernel size, stride 2 */
static inline void transpose_mac_3row_3col_2input_2filter_2stride_fp(float* out, float* out2, float* out3, const int output_depth, 
                      const float* input_0, const float* input_1, const float* filter_0, const float* filter_1) {
  *out++ += *input_0 * *filter_0++; // output[0][0][0]
  *out += *input_0 * *filter_1++; // output[1][0][0]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0++; // output[0][0][1]
  *out += *input_0 * *filter_1++; // output[1][0][1]
  out += output_depth - 1;
  *out++ += *input_0 * *filter_0; // output[0][0][2]
  *out-- += *input_0 * *filter_1; // output[1][0][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out++ += *input_1 * *filter_0++; // output[0][0][2]
  *out += *input_1 * *filter_1++; // output[1][0][2]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0++; // output[0][0][3]
  *out += *input_1 * *filter_1++; // output[1][0][3]
  out += output_depth - 1;
  *out++ += *input_1 * *filter_0++; // output[0][0][4]
  *out += *input_1 * *filter_1++; // output[1][0][4]

  *out2++ += *input_0 * *filter_0++; // output[0][1][0]
  *out2 += *input_0 * *filter_1++; // output[1][1][0]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0++; // output[0][1][1]
  *out2 += *input_0 * *filter_1++; // output[1][1][1]
  out2 += output_depth - 1;
  *out2++ += *input_0 * *filter_0; // output[0][1][2]
  *out2-- += *input_0 * *filter_1; // output[1][1][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out2++ += *input_1 * *filter_0++; // output[0][1][2]
  *out2 += *input_1 * *filter_1++; // output[1][1][2]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0++; // output[0][1][3]
  *out2 += *input_1 * *filter_1++; // output[1][1][3]
  out2 += output_depth - 1;
  *out2++ += *input_1 * *filter_0++; // output[0][1][4]
  *out2 += *input_1 * *filter_1++; // output[1][1][4]

  *out3++ += *input_0 * *filter_0++; // output[0][2][0]
  *out3 += *input_0 * *filter_1++; // output[1][2][0]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0++; // output[0][2][1]
  *out3 += *input_0 * *filter_1++; // output[1][2][1]
  out3 += output_depth - 1;
  *out3++ += *input_0 * *filter_0; // output[0][2][2]
  *out3-- += *input_0 * *filter_1; // output[1][2][2]
  filter_0 -= 2;
  filter_1 -= 2;
  *out3++ += *input_1 * *filter_0++; // output[0][2][2]
  *out3 += *input_1 * *filter_1++; // output[1][2][2]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0++; // output[0][2][3]
  *out3 += *input_1 * *filter_1++; // output[1][2][3]
  out3 += output_depth - 1;
  *out3++ += *input_1 * *filter_0++; // output[0][2][4]
  *out3 += *input_1 * *filter_1++; // output[1][2][4]
}

static inline void transpose_mac_3row_3col_2input_1filter_2stride_fp(float* out, float* out2, float* out3, const int output_depth, 
                      const float* input_0, const float* input_1, const float* filter_0) {
  *out += *input_0 * *filter_0++; // output[0][0][0]
  out += output_depth;
  *out += *input_0 * *filter_0++; // output[0][0][1]
  out += output_depth;
  *out += *input_0 * *filter_0; // output[0][0][2]
  filter_0 -= 2;
  *out += *input_1 * *filter_0++; // output[0][0][2]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][3]
  out += output_depth;
  *out += *input_1 * *filter_0++; // output[0][0][4]

  *out2 += *input_0 * *filter_0++; // output[0][1][0]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0++; // output[0][1][1]
  out2 += output_depth;
  *out2 += *input_0 * *filter_0; // output[0][1][2]
  filter_0 -= 2;
  *out2 += *input_1 * *filter_0++; // output[0][1][2]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][3]
  out2 += output_depth;
  *out2 += *input_1 * *filter_0++; // output[0][1][4]

  *out3 += *input_0 * *filter_0++; // output[0][2][0]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0++; // output[0][2][1]
  out3 += output_depth;
  *out3 += *input_0 * *filter_0; // output[0][2][2]
  filter_0 -= 2;
  *out3 += *input_1 * *filter_0++; // output[0][2][2]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][3]
  out3 += output_depth;
  *out3 += *input_1 * *filter_0++; // output[0][2][4]
}
/* END: For 3x3 kernel size, stride 2 */

/* END: MAC Functions for Transpose Conv */



/* START: MAC Functions for Transpose Depthwise Conv */

/* START: For 3x3 kernel size*/
static inline void transpose_depthwise_mac_kernel3_2row_fp_uniweight(float* sum_0, float* sum_1, 
                      const float* two_column_buffer, const float* ksrc_transposed, const uint16_t input_width, 
                      const uint16_t STRIDE, const uint16_t IN_PAD, const uint16_t OUT_PAD) {
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[0];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[3];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[3];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[4];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[4];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[5];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[5];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[6];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[6];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[7];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[7];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[8];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[8];
}

static inline void transpose_depthwise_mac_kernel3_1row_fp_uniweight(float* sum_0, 
                      const float* two_column_buffer, const float* ksrc_transposed, const uint16_t input_width, 
                      const uint16_t STRIDE, const uint16_t IN_PAD, const uint16_t OUT_PAD) {
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
    
    *sum_0 += two_column_buffer[0] * ksrc_transposed[3];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[4];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[5];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
    
    *sum_0 += two_column_buffer[0] * ksrc_transposed[6];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[7];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[8];
}
/* END: For 3x3 kernel size*/


/* START: For 5x5 kernel size*/
static inline void transpose_depthwise_mac_kernel5_2row_fp_uniweight(float* sum_0, float* sum_1, 
                      const float* two_column_buffer, const float* ksrc_transposed, const uint16_t input_width, 
                      const uint16_t STRIDE, const uint16_t IN_PAD, const uint16_t OUT_PAD) {
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[0];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[3];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[4];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
    
    *sum_0 += two_column_buffer[0] * ksrc_transposed[5];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[5];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[6];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[6];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[7];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[7];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[8];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[8];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[9];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[9];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
    
    *sum_0 += two_column_buffer[0] * ksrc_transposed[10];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[10];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[11];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[11];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[12];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[12];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[13];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[13];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[14];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[14];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[15];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[15];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[16];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[16];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[17];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[17];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[18];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[18];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[19];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[19];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[20];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[20];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[21];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[21];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[22];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[22];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[23];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[23];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[24];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[24];
}

static inline void transpose_depthwise_mac_kernel5_1row_fp_uniweight(float* sum_0, 
                      const float* two_column_buffer, const float* ksrc_transposed, const uint16_t input_width, 
                      const uint16_t STRIDE, const uint16_t IN_PAD, const uint16_t OUT_PAD) {
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
    
    *sum_0 += two_column_buffer[0] * ksrc_transposed[5];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[6];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[7];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[8];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[9];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
    
    *sum_0 += two_column_buffer[0] * ksrc_transposed[10];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[11];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[12];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[13];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[14];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[15];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[16];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[17];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[18];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[19];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[20];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[21];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[22];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[23];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[24];
}
/* END: For 5x5 kernel size*/


/* START: For 7x7 kernel size*/
static inline void transpose_depthwise_mac_kernel7_2row_fp_uniweight(float* sum_0, float* sum_1, 
                      const float* two_column_buffer, const float* ksrc_transposed, const uint16_t input_width, 
                      const uint16_t STRIDE, const uint16_t IN_PAD, const uint16_t OUT_PAD) {
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[0];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[1];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[2];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[3];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[4];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[5];
    *sum_1 += two_column_buffer[6] * ksrc_transposed[5];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[6];
    *sum_1 += two_column_buffer[7] * ksrc_transposed[6];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
    
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[7];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[8];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[8];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[9];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[9];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[10];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[10];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[11];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[11];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[12];
    *sum_1 += two_column_buffer[6] * ksrc_transposed[12];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[13];
    *sum_1 += two_column_buffer[7] * ksrc_transposed[13];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
    
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[14];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[15];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[15];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[16];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[16];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[17];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[17];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[18];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[18];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[19];
    *sum_1 += two_column_buffer[6] * ksrc_transposed[19];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[20];
    *sum_1 += two_column_buffer[7] * ksrc_transposed[20];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[21];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[22];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[22];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[23];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[23];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[24];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[24];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[25];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[25];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[26];
    *sum_1 += two_column_buffer[6] * ksrc_transposed[26];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[27];
    *sum_1 += two_column_buffer[7] * ksrc_transposed[27];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[28];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[29];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[29];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[30];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[30];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[31];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[31];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[32];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[32];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[33];
    *sum_1 += two_column_buffer[6] * ksrc_transposed[33];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[34];
    *sum_1 += two_column_buffer[7] * ksrc_transposed[34];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[35];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[36];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[36];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[37];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[37];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[38];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[38];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[39];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[39];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[40];
    *sum_1 += two_column_buffer[6] * ksrc_transposed[40];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[41];
    *sum_1 += two_column_buffer[7] * ksrc_transposed[41];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[42];
    *sum_1 += two_column_buffer[1] * ksrc_transposed[42];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[43];
    *sum_1 += two_column_buffer[2] * ksrc_transposed[43];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[44];
    *sum_1 += two_column_buffer[3] * ksrc_transposed[44];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[45];
    *sum_1 += two_column_buffer[4] * ksrc_transposed[45];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[46];
    *sum_1 += two_column_buffer[5] * ksrc_transposed[46];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[47];
    *sum_1 += two_column_buffer[6] * ksrc_transposed[47];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[48];
    *sum_1 += two_column_buffer[7] * ksrc_transposed[48];
}

static inline void transpose_depthwise_mac_kernel7_1row_fp_uniweight(float* sum_0, 
                      const float* two_column_buffer, const float* ksrc_transposed, const uint16_t input_width, 
                      const uint16_t STRIDE, const uint16_t IN_PAD, const uint16_t OUT_PAD) {
    *sum_0 += two_column_buffer[0] * ksrc_transposed[0];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[1];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[2];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[3];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[4];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[5];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[6];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
    
    *sum_0 += two_column_buffer[0] * ksrc_transposed[7];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[8];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[9];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[10];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[11];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[12];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[13];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;
    
    *sum_0 += two_column_buffer[0] * ksrc_transposed[14];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[15];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[16];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[17];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[18];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[19];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[20];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[21];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[22];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[23];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[24];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[25];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[26];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[27];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[28];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[29];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[30];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[31];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[32];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[33];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[34];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[35];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[36];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[37];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[38];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[39];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[40];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[41];
    two_column_buffer += (input_width - 1) * STRIDE + 1 + IN_PAD * 2 + OUT_PAD;

    *sum_0 += two_column_buffer[0] * ksrc_transposed[42];
    *sum_0 += two_column_buffer[1] * ksrc_transposed[43];
    *sum_0 += two_column_buffer[2] * ksrc_transposed[44];
    *sum_0 += two_column_buffer[3] * ksrc_transposed[45];
    *sum_0 += two_column_buffer[4] * ksrc_transposed[46];
    *sum_0 += two_column_buffer[5] * ksrc_transposed[47];
    *sum_0 += two_column_buffer[6] * ksrc_transposed[48];
}
/* END: For 7x7 kernel size*/

/* END: MAC Functions for Transpose Depthwise Conv */